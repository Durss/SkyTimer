package {	import fr.durss.skywar.skytimer.AbstractApp;	import fr.durss.skywar.skytimer.components.STGraphicButton;	import fr.durss.skywar.skytimer.data.SharedObjectManager;	import fr.durss.skywar.skytimer.data.SkinMetrics;	import fr.durss.skywar.skytimer.events.TimerViewEvent;	import fr.durss.skywar.skytimer.graphics.TrayIcon;	import fr.durss.skywar.skytimer.graphics.alert.AlertsManager;	import fr.durss.skywar.skytimer.tabmenu.AirTabMenu;	import flash.desktop.NativeApplication;	import flash.desktop.SystemTrayIcon;	import flash.display.BitmapData;	import flash.display.NativeMenu;	import flash.display.NativeMenuItem;	import flash.display.NativeWindow;	import flash.display.Screen;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.InvokeEvent;	import flash.events.MouseEvent;	import flash.events.NativeWindowBoundsEvent;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.utils.getTimer;	/**	 * Bootstrap class of the AIR version of the application.	 * 	 * @author Francois	 */	 	[SWF(width="247", height="460", backgroundColor="0xFFFFFF", frameRate="30")]	public class SkyTimerAir extends AbstractApp {		private var _closeApp:STGraphicButton;		private var _minimizeApp:STGraphicButton;		private var _lastSystrayClickTime:Number;		private var _alertsManager:AlertsManager;				/* *********** *		 * CONSTRUCTOR *		 * *********** */		public function SkyTimerAir() {			super();			stage.align				= StageAlign.TOP_LEFT;			stage.scaleMode			= StageScaleMode.NO_SCALE;			stage.stageFocusRect	= false;		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/* ****** *		 * PUBLIC *		 * ****** */						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the application.<br>		 */		override protected function initialize(e:Event):void {			super.initialize(e);			_tabMenus		= addChild(new AirTabMenu()) as AirTabMenu;			_closeApp		= addChild(new STGraphicButton(SkinMetrics.getInstance().skinCloseAppButton)) as STGraphicButton;			_minimizeApp	= addChild(new STGraphicButton(SkinMetrics.getInstance().skinMinimizeAppButton)) as STGraphicButton;			_alertsManager	= addChild(new AlertsManager()) as AlertsManager;						_lastSystrayClickTime	= 0;			_tabMenus.selectedIndex = 0;						_closeApp.addEventListener(MouseEvent.CLICK,	closeAppHandler);			_minimizeApp.addEventListener(MouseEvent.CLICK,	minimizeAppHandler);			_tabMenus.addEventListener(Event.SELECT,		selectTabHandler);			_timers.addEventListener(TimerViewEvent.TIMER_COMPLETE, timerCompleteHandler);			stage.addEventListener(MouseEvent.MOUSE_DOWN,	mouseDownHandler);			stage.addEventListener(Event.RESIZE,			resizeHandler);						/*FDT_IGNORE*/			CONFIG::Air			{			/*FDT_IGNORE*/								if (NativeApplication.supportsSystemTrayIcon) {					var bmpd:BitmapData	= new BitmapData(16,16,true, 0);					bmpd.draw(new TrayIcon());					NativeApplication.nativeApplication.icon.bitmaps = [bmpd];					var menu:NativeMenu = new NativeMenu();					var openMenu:NativeMenuItem = new NativeMenuItem("Open"); 					var closeMenu:NativeMenuItem = new NativeMenuItem("Close"); 					menu.addItem(openMenu);					menu.addItem(closeMenu);					var systray:SystemTrayIcon = NativeApplication.nativeApplication.icon as SystemTrayIcon; 					systray.menu = menu;										systray.addEventListener(MouseEvent.CLICK, doubleClickSystrayHandler);					openMenu.addEventListener(Event.SELECT, openAppHandler);					closeMenu.addEventListener(Event.SELECT, closeAppHandler);				}								var pos:Point = SharedObjectManager.getInstance().windowPos;				if(Screen.getScreensForRectangle(new Rectangle(pos.x, pos.y, 1, 1)).length == 0 || pos.x == -1) {					pos.x = Screen.mainScreen.visibleBounds.right - stage.nativeWindow.width;					pos.y = Screen.mainScreen.visibleBounds.bottom - stage.nativeWindow.height;					SharedObjectManager.getInstance().windowPos = pos;				}				stage.nativeWindow.x = pos.x;				stage.nativeWindow.y = pos.y;								stage.nativeWindow.addEventListener(Event.CLOSING, closingAppHandler);				stage.nativeWindow.addEventListener(NativeWindowBoundsEvent.MOVE, movingAppHandler);				NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, invokeAppHandler);								/*FDT_IGNORE*/			}			/*FDT_IGNORE*/						computePositions();		}		/**		 * Resize / replace the elements.<br>		 */		override protected function computePositions():void {			super.computePositions();			if(_closeApp == null) return;			_closeApp.x			= SkinMetrics.getInstance().closeAppButtonPos.x;			_closeApp.y			= SkinMetrics.getInstance().closeAppButtonPos.y;			_minimizeApp.x		= SkinMetrics.getInstance().minimizeAppButtonPos.x;			_minimizeApp.y		= SkinMetrics.getInstance().minimizeAppButtonPos.y;		}				/**		 * Called when the skin is modified.<br>		 */		override protected function changeSkinHandler(e:Event = null):void {			super.changeSkinHandler(e);			if(_closeApp == null) return;			_closeApp.background	= SkinMetrics.getInstance().skinCloseAppButton;			_minimizeApp.background	= SkinMetrics.getInstance().skinMinimizeAppButton;		}				/**		 * Called when a timer completes.		 */		override protected function timerCompleteHandler(e:TimerViewEvent):void {			super.timerCompleteHandler(e);			_alertsManager.alert(e.timer);		}		/**		 * Called on window's resize		 */		private function resizeHandler(e:Event):void { computePositions(); }		/**		 * Called on mouse down of the background to drag the window.		 */		private function mouseDownHandler(e:MouseEvent):void {			/*FDT_IGNORE*/			CONFIG::Air			{			/*FDT_IGNORE*/				if(e.target == _background) {					stage.nativeWindow.startMove();				}			/*FDT_IGNORE*/			}			/*FDT_IGNORE*/		}				/**		 * Called when "open" menu of the traybar icon is clicked		 */		private function openAppHandler(e:Event = null):void {			stage.nativeWindow.visible = true;            stage.nativeWindow.restore();            stage.nativeWindow.orderToFront();            stage.nativeWindow.activate();		}				/**		 * Called when the traybar icon is clicked		 */		private function doubleClickSystrayHandler(event:MouseEvent):void {			if(getTimer() - _lastSystrayClickTime < 500) {				openAppHandler();			}			_lastSystrayClickTime = getTimer();		}		/**		 * Minimizes the window		 */		private function minimizeAppHandler(e:Event):void {			if(SharedObjectManager.getInstance().systrayClose) {				stage.nativeWindow.visible = false;			}else{				stage.nativeWindow.minimize();			}		}				/**		 * Closes the window.<br>		 */		private function closeAppHandler(e:Event):void {			_timers.saveTimers();			movingAppHandler();			try {				stage.nativeWindow.close();			}catch(event:Error) {				//Not AIR runtime			}			closeAllWindows();		}				/**		 * Called when the application is closed via right click -> close on taskbar tab.<br>		 */		private function closingAppHandler(e:Event):void {			_timers.saveTimers();			movingAppHandler();			closeAllWindows();		}				/**		 * Closes all the windows assoociated to the application to have it fully closed.		 */		private function closeAllWindows():void {			/*FDT_IGNORE*/			CONFIG::Air			{			/*FDT_IGNORE*/				var windows:Array = NativeApplication.nativeApplication.openedWindows;				var i:int, len:int;				len = windows.length;				for(i = 0; i < len; ++i) {					NativeWindow(windows[i]).close();				}			/*FDT_IGNORE*/			}			/*FDT_IGNORE*/		}		/** 		 * Called moving the window's application. 		 */		private function movingAppHandler(e:NativeWindowBoundsEvent = null):void {			SharedObjectManager.getInstance().windowPos = new Point(stage.nativeWindow.x, stage.nativeWindow.y);		}				/**		 * Called when application is invoked.		 */		private function invokeAppHandler(event:InvokeEvent):void {			openAppHandler();		}	}}