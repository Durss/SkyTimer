package fr.durss.skywar.skytimer.graphics.sessionselector {	import com.nurun.components.button.visitors.CssVisitor;	import fr.durss.components.ui.tooltip.SimpleToolTip;	import fr.durss.components.ui.tooltip.ToolTipAlign;	import fr.durss.skywar.skytimer.graphics.AbstractView;	import com.nurun.components.button.BaseButton;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.filters.GlowFilter;	/**	 * Displays the session selector.<br>	 * <br>	 * The session selector provides a way to create different timers sessions	 * and open them.<br>	 * Fires an <code>Event.SELECT</code> event when the content should be opened.<br>	 * 	 * @author  Francois	 */	public class SessionView extends AbstractView {				private var _openMenu:BaseButton;		private var _toolTip:SimpleToolTip;		private var _selector:SessionSelector;								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>SessionSelector</code>.<br>		 */		public function SessionView() {			addEventListener(Event.ADDED_TO_STAGE, initialize);		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the view visibility.<br>		 * <br>		 * It hides the page content but not the menu button used to open the view.		 */		override public function set visible(value:Boolean):void {			_selector.visible = value;		}		/* ****** *		 * PUBLIC *		 * ****** */						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.<br>		 */		private function initialize(e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, initialize);						_selector		= addChild(new SessionSelector()) as SessionSelector;			_openMenu		= addChild(new BaseButton("Gestionnaire de sessions", "openSessionMenuLabel")) as BaseButton;			_toolTip		= addChild(new SimpleToolTip()) as SimpleToolTip;						var visitor:CssVisitor = new CssVisitor();			_openMenu.accept(visitor);						_openMenu.filters	= [new GlowFilter(0, 1, 2, 2, 2, 3)];						_openMenu.addEventListener(MouseEvent.CLICK,		clickHandler);			_openMenu.addEventListener(MouseEvent.MOUSE_OUT,	rollOutHandler);			_openMenu.addEventListener(MouseEvent.MOUSE_OVER,	rollOverHandler);						computePositions();		}		/**		 * Resize and replace the elements.<br>		 */		private function computePositions():void {			_openMenu.x = Math.round((WIDTH - _openMenu.width) * .5);			_openMenu.y = HEIGHT + 8;		}										//__________________________________________________________ MOUSE EVENTS				/**		 * Called when menu button is rolled over.<br>		 */		private function rollOverHandler(e:MouseEvent):void {			var txt:String = "<b>Permet de gérer plusieurs sessions de timers.</b><br/><br/>";			txt += "Au travers de cette fonctionnalité vous pouvez par exemple créer une session différente par île ";			txt += "de manière à ce que les timers d'une île ne soient pas affichés avec les timers d'une autre.<br/><br/>";			txt += "Cette option peut également permettre de dissocier les timers de 2 parties différentes.";			_toolTip.open(txt, "toolTipContent", ToolTipAlign.TOP_CENTER);			_toolTip.width = 180;		}		/**		 * Called when menu button is rolled out.<br>		 */		private function rollOutHandler(e:MouseEvent):void {			_toolTip.close();		}		/**		 * Called when menu button is clicked.<br>		 */		private function clickHandler(e:MouseEvent):void {			dispatchEvent(new Event(Event.SELECT));		}	}}