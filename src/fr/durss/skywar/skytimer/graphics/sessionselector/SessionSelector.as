package fr.durss.skywar.skytimer.graphics.sessionselector {	import fl.controls.List;	import fr.durss.components.ui.form.input.TextInput;	import fr.durss.skywar.skytimer.components.SubmitButton;	import fr.durss.skywar.skytimer.data.SharedObjectManager;	import fr.durss.skywar.skytimer.data.SkinMetrics;	import fr.durss.skywar.skytimer.events.SharedObjectManagerEvent;	import fr.durss.skywar.skytimer.graphics.AbstractView;	import fr.durss.skywar.skytimer.graphics.sessionselector.vo.Session;	import fr.durss.skywar.skytimer.style.ListStyle;	import com.nurun.components.button.TextAlign;	import com.nurun.components.text.CssTextField;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.ui.Keyboard;	/**	 * Displays the content of the selector view.<br>	 * 	 * @author  Francois	 */	public class SessionSelector extends AbstractView {				private var _label:CssTextField;		private var _labelName:CssTextField;		private var _addSessionBt:SubmitButton;		private var _removeSessionBt:SubmitButton;		private var _sessionsList:List;		private var _sessionName:TextInput;		private var _controlPressed:Boolean;		private var _tips:CssTextField;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>SessionSelector</code>.<br>		 */		public function SessionSelector() {			addEventListener(Event.ADDED_TO_STAGE, initialize);		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/* ****** *		 * PUBLIC *		 * ****** */						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.<br>		 */		private function initialize(e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, initialize);						_label				= addChild(new CssTextField("windowLabel")) as CssTextField;			_addSessionBt		= addChild(new SubmitButton("Ajouter")) as SubmitButton;			_removeSessionBt	= addChild(new SubmitButton("Supprimer")) as SubmitButton;			_sessionsList		= addChild(new List()) as List;			_sessionName		= addChild(new TextInput()) as TextInput;			_labelName			= addChild(new CssTextField("windowLabel")) as CssTextField;			_tips				= addChild(new CssTextField("windowLabel")) as CssTextField;						_label.setText("Liste de vos sessions :");			_labelName.setText("Ajout de session :");			_tips.setText("Astuce :<br /><font size=\"10\">Pour naviguer de session en session plus rapidement, utilisez les raccourcis clavier CTRL+Flèche de gauche/droite.</font>");						_tips.wordWrap				= true;;			_label.wordWrap				= true;;			_labelName.wordWrap			= true;;			_addSessionBt.enabled		= false;			_removeSessionBt.enabled	= false;			_addSessionBt.textAlign = _removeSessionBt.textAlign = TextAlign.CENTER;						_sessionName.addEventListener(Event.CHANGE,			changeLabelHandler);			_addSessionBt.addEventListener(MouseEvent.CLICK,	clickButtonHandler);			_removeSessionBt.addEventListener(MouseEvent.CLICK,	clickButtonHandler);			_sessionsList.addEventListener(Event.CHANGE,		selectItemHandler);			stage.addEventListener(KeyboardEvent.KEY_DOWN,		keyDownHandler);			stage.addEventListener(KeyboardEvent.KEY_UP,		keyUpHandler);			SkinMetrics.getInstance().addEventListener(Event.CHANGE, changeSkinHandler);			SharedObjectManager.getInstance().addEventListener(SharedObjectManagerEvent.SESSIONS_MODIFIED, sessionsChangedHandler);						ListStyle.setStyles(_sessionsList);			populateList();			computePositions();		}		/**		 * Resize and replace the elements.<br>		 */		private function computePositions():void {			_label.width			= WIDTH;						_sessionsList.y			= Math.round(_label.height) + 2;			_sessionsList.width		= WIDTH;			_sessionsList.height	= 150;						_removeSessionBt.height	= 23;			_removeSessionBt.width	= WIDTH * .5;			_removeSessionBt.y		= Math.round(_sessionsList.y + _sessionsList.height) + 2;			_removeSessionBt.x		= Math.round((WIDTH - _removeSessionBt.width) * .5);						_labelName.width		= WIDTH;			_labelName.y			= Math.round(_removeSessionBt.y + _removeSessionBt.height) + 10;						_sessionName.width		= WIDTH;			_sessionName.y			= Math.round(_labelName.y + _labelName.height) + 2;						_addSessionBt.height	= 23;			_addSessionBt.width		= WIDTH * .5;			_addSessionBt.y			= Math.round(_sessionName.y + _sessionName.height) + 2;			_addSessionBt.x			= Math.round((WIDTH - _addSessionBt.width) * .5);						_tips.width				= WIDTH;			_tips.y					= Math.round(_addSessionBt.y + _addSessionBt.height) + 10;		}				/**		 * Populate the session's list.<br>		 */		public function populateList():void {			_sessionsList.removeAll();			var i:int, len:int, sessions:Array, session:Session, currID:String, selectedIndex:int;			sessions	= SharedObjectManager.getInstance().getSessions();			len			= sessions.length;			currID		= SharedObjectManager.getInstance().currentSessionId;			_sessionsList.addItem({label:"- session par défaut -", data:SharedObjectManager.DEFAULT_SESSION.id});			for(i = 0; i < len; ++i) {				session = new Session(sessions[i]);				if(session.id == SharedObjectManager.DEFAULT_SESSION.id) continue;				_sessionsList.addItem({label:session.name, data:session.id});				if(currID == session.id){					selectedIndex = i + 1;				}			}			_sessionsList.selectedIndex = selectedIndex;			_removeSessionBt.enabled = _sessionsList.selectedIndex > 0;		}								//__________________________________________________________ EVENTS HANDLERS				/**		 * Called when the skin is modified.<br>		 */		private function changeSkinHandler(e:Event):void {			ListStyle.setStyles(_sessionsList);			_addSessionBt.background = SkinMetrics.getInstance().skinSubmitButton;			_removeSessionBt.background = SkinMetrics.getInstance().skinSubmitButton;		}				/**		 * Called when the sessions are modified.<br>		 * <br>		 * Happens, for the moment, only when loading a SWT file.		 */		private function sessionsChangedHandler(e:SharedObjectManagerEvent):void {			populateList();		}		/**		 * Called when an item of the session's list is selected.<br>		 */		private function selectItemHandler(e:Event = null):void {			_removeSessionBt.enabled = _sessionsList.selectedIndex > 0;			SharedObjectManager.getInstance().currentSessionId = _sessionsList.selectedItem.data;		}		/**		 * Called when a button is clicked (add or remove).<br>		 */		private function clickButtonHandler(e:MouseEvent):void {			if(e.target == _addSessionBt) {				SharedObjectManager.getInstance().saveSession(new Session(null, _sessionName.textfield.text));			}else if(e.target == _removeSessionBt) {				SharedObjectManager.getInstance().deleteSession(_sessionsList.selectedItem.data);				_removeSessionBt.enabled = false;			}			populateList();		}		/**		 * Called when the session's name changes.<br>		 */		private function changeLabelHandler(e:Event):void {			_addSessionBt.enabled = _sessionName.textfield.text.length > 0;		}				/**		 * Called when a key is pressed.<br>		 */		private function keyDownHandler(e:KeyboardEvent):void {			if(e.keyCode == Keyboard.CONTROL) {				_controlPressed = true;			}			//Can't simply use "e.ctrlKey" to check if the CTRL key is pressed			//or not due to MAC bugs...			if(_controlPressed && !(stage.focus is CssTextField)) {				var curIndex:int = _sessionsList.selectedIndex;				if(e.keyCode == Keyboard.LEFT) {					_sessionsList.selectedIndex = (--curIndex < 0)? _sessionsList.length - 1 : curIndex;				}else if(e.keyCode == Keyboard.RIGHT) {					_sessionsList.selectedIndex = (curIndex + 1) % _sessionsList.length;				}				if(e.keyCode == Keyboard.LEFT || e.keyCode == Keyboard.RIGHT) {					selectItemHandler();				}			}		}				/**		 * Called when a key is released.<br>		 */		private function keyUpHandler(e:KeyboardEvent):void {			if(e.keyCode == Keyboard.CONTROL) {				_controlPressed = false;			}			if(e.keyCode == Keyboard.ENTER && stage.focus == _sessionName.textfield) {				SharedObjectManager.getInstance().saveSession(new Session(null, _sessionName.textfield.text));				populateList();			}		}	}}