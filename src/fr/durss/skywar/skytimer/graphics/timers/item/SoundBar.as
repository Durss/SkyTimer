package fr.durss.skywar.skytimer.graphics.timers.item {	import fr.durss.components.ui.tooltip.SimpleToolTip;	import fr.durss.components.ui.tooltip.ToolTipAlign;	import fr.durss.skywar.skytimer.data.SkinMetrics;	import fr.durss.skywar.skytimer.events.TimerItemEvent;	import fr.durss.skywar.skytimer.graphics.SoundButtonGraphics;	import com.nurun.components.text.CssTextField;	import flash.display.Shape;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.ColorTransform;	/**	 * Displasy the sound button of a <code>TimerBar</code>	 * 	 * @author  Fran√ßois	 */	public class SoundBar extends SoundButtonGraphics {
		private var _percent:Number;		private var _percentTxt:CssTextField;		private var _percentBar:Shape;		private var _toolTip:SimpleToolTip;		private var _offsetDrag:int;		private var _offsetPercent:Number;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>SoundBar</code>		 */		public function SoundBar() { initialize(); }						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the volume's percent.<p>		 * 		 * @param value	sound percent. Value between 0 and 1.		 */		public function set percent(value:Number):void {			_percent = value;			computePositions();		}				/**		 * Gets the volume's percent		 */		public function get percent():Number{ return _percent; }				/**		 * Sets the color of the timer		 */		public function set color(value:uint):void {			var ct:ColorTransform = new ColorTransform();			ct.color = value;			_percentBar.transform.colorTransform = ct;			changeSkinHandler();		}						/* ****** *		 * PUBLIC *		 * ****** */						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class		 */		private function initialize():void {			_percentBar	= addChildAt(new Shape(), 0) as Shape;			_percentTxt	= addChild(new CssTextField()) as CssTextField;			_toolTip	= addChild(new SimpleToolTip()) as SimpleToolTip;						buttonMode			= true;			_toolTip.scaleX		= _toolTip.scaleY = 0;			_percentBar.mask	= maskMc;			_percentTxt.visible	= false;			_percentTxt.filters	= iconMc.filters;			_percentBar.graphics.beginFill(0x000000, .8);			_percentBar.graphics.drawRect(0, 0, maskMc.width, 10);						changeSkinHandler();						addEventListener(MouseEvent.ROLL_OVER,		mouseOverHandler);			addEventListener(MouseEvent.ROLL_OUT,		mouseOutHandler);			addEventListener(MouseEvent.MOUSE_DOWN,		startDragHandler);			addEventListener(MouseEvent.MOUSE_UP,		stopDragHandler);			addEventListener(Event.ADDED_TO_STAGE,		addedToStageHandler);			SkinMetrics.getInstance().addEventListener(Event.CHANGE, changeSkinHandler);						computePositions();		}				/**		 * Resize and replace the elements.		 */		private function computePositions():void {			_percentBar.width	= Math.round(maskMc.width);			_percentBar.height	= Math.round(maskMc.height * _percent);			_percentBar.y		= Math.round(maskMc.y + maskMc.height - _percentBar.height);			_percentTxt.setText(Math.round(_percent * 100).toString(), "soundPercent");			_percentTxt.x		= Math.round((maskMc.width - _percentTxt.width) * .5) - 1;			_percentTxt.y		= Math.round((maskMc.height - _percentTxt.height) * .5) - 2;		}		/**		 * Called when component is added to the stage		 */		private function addedToStageHandler(e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE,	addedToStageHandler);			stage.addEventListener(MouseEvent.MOUSE_UP,	stopDragHandler);		}				/**		 * Called when the skin is modified.<p>		 */		private function changeSkinHandler(e:Event = null):void {			hitMc.gotoAndStop(SkinMetrics.getInstance().frame);			iconMc.gotoAndStop(SkinMetrics.getInstance().frame);			maskMc.gotoAndStop(SkinMetrics.getInstance().frame);			computePositions();		}										//__________________________________________________________ MOUSE EVENTS				/**		 * Called on roll over to display the tooltip		 */		private function mouseOverHandler(e:MouseEvent):void {			if(!_percentTxt.visible) {				_toolTip.scaleX = _toolTip.scaleY = 1;				_toolTip.open("Volume", "toolTipContent", ToolTipAlign.TOP_LEFT);			}		}		/**		 * Called on roll out to hide the tooltip		 */		private function mouseOutHandler(e:MouseEvent):void {			_toolTip.scaleX = _toolTip.scaleY = 0;			_toolTip.close();		}		/**		 * Called when user starts to drag the sound bar		 */		private function startDragHandler(e:MouseEvent):void {			_toolTip.scaleX = _toolTip.scaleY = 0;			_toolTip.close();			_offsetDrag			= mouseY;			_offsetPercent		= percent;			iconMc.visible		= false;			_percentTxt.visible	= true;			addEventListener(Event.ENTER_FRAME, enterFrameHandler);			enterFrameHandler();		}				/**		 * Called when user stops to drag the bar		 */		private function stopDragHandler(e:MouseEvent):void {			iconMc.visible		= true;			_percentTxt.visible	= false;			removeEventListener(Event.ENTER_FRAME, enterFrameHandler);			if(percent != _offsetPercent && !isNaN(_offsetPercent)) {				dispatchEvent(new TimerItemEvent(TimerItemEvent.CHANGE_SOUND));			}		}		/**		 * Called on enter frame event while dragging bar.		 */		private function enterFrameHandler(e:Event = null):void {			percent = Math.max(Math.min(_offsetPercent + (_offsetDrag - mouseY) * .01, 1), 0);		}	}}