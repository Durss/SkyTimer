package fr.durss.skywar.skytimer.graphics.timers.item {	import fr.durss.skywar.skytimer.graphics.IconLoopSelected;	import fr.durss.skywar.skytimer.components.SubmitButton;	import fr.durss.skywar.skytimer.data.SkinMetrics;	import fr.durss.skywar.skytimer.events.CustomTimerEvent;	import fr.durss.skywar.skytimer.events.TimerItemEvent;	import fr.durss.skywar.skytimer.graphics.IconLoop;	import fr.durss.skywar.skytimer.graphics.IconPause;	import fr.durss.skywar.skytimer.graphics.IconPlay;	import fr.durss.skywar.skytimer.time.CustomTimer;	import com.nurun.components.button.IconAlign;	import com.nurun.components.vo.Margin;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	/**	 * Displays the control bar over the timer bar.	 * 	 * @author  Fran√ßois	 */	public class ControlBar extends Sprite {		private var _width:int;		private var _editBt:SubmitButton;		private var _pauseBt:SubmitButton;		private var _loopBt:SubmitButton;		private var _timer:CustomTimer;		private var _hitBox:Sprite;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>ControlBar</code>		 */		public function ControlBar() { initialize(); }						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the timer's reference.		 */		public function set timer(value:CustomTimer):void {			if(_timer != null) {				_timer.removeEventListener(CustomTimerEvent.START,		timerStartHandler);				_timer.removeEventListener(CustomTimerEvent.COMPLETE,	timerCompleteHandler);			}			_timer = value;			_pauseBt.selected	= !_timer.paused && !_timer.complete;			_loopBt.selected	= _timer.loop;			_loopBt.label		= (_timer.repeatCount > 0 && _timer.loop) ? _timer.repeatCount.toString() : "";			_timer.addEventListener(CustomTimerEvent.START,		timerStartHandler);			_timer.addEventListener(CustomTimerEvent.COMPLETE,	timerCompleteHandler);			computePositions();		}		/**		 * Sets the width of the component without just scaling it.		 */		override public function set width(value:Number):void { _width = value; computePositions(); }						/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Makes the component garbage collectable.		 */		public function dispose():void {			_editBt.removeEventListener(MouseEvent.CLICK,	editHandler);			_pauseBt.removeEventListener(MouseEvent.CLICK,	togglePauseHandler);			_loopBt.removeEventListener(MouseEvent.CLICK,	toggleLoopHandler);			_editBt.dispose();			_pauseBt.dispose();			_loopBt.dispose();		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class		 */		private function initialize():void {			_hitBox		= addChild(new Sprite()) as Sprite;			_editBt		= addChild(new SubmitButton("Editer")) as SubmitButton;			_pauseBt	= addChild(new SubmitButton("", new IconPlay(), new IconPause())) as SubmitButton;			_loopBt		= addChild(new SubmitButton("", new IconLoop(), new IconLoopSelected())) as SubmitButton;						alpha	= 0;			_width	= 150;			_hitBox.graphics.beginFill(0xff0000, 0);			_hitBox.graphics.drawRect(0, 0, 10, 10);						_editBt.height		= 23;			_pauseBt.height		= 23;			_pauseBt.toggle		= true;			_loopBt.height		= 23;			_loopBt.toggle		= true;			_loopBt.style		= "timerTime";			_editBt.contentMargin	= new Margin(0, 0, 0, 0, 10, 6);			_pauseBt.contentMargin	= new Margin(0, 0, 0, 0, 10, 4);			_loopBt.contentMargin	= new Margin(0, 0, 0, 0, 5, 4);			_pauseBt.iconAlign		= IconAlign.CENTER;			_loopBt.iconAlign		= IconAlign.CENTER;						_editBt.addEventListener(MouseEvent.CLICK,		editHandler);			_loopBt.addEventListener(MouseEvent.CLICK,		toggleLoopHandler);			_pauseBt.addEventListener(MouseEvent.CLICK,		togglePauseHandler);			SkinMetrics.getInstance().addEventListener(Event.CHANGE, changeSkinHandler);						computePositions();		}				/**		 * Called when the skin is modified.<p>		 */		private function changeSkinHandler(e:Event):void {			_editBt.changeSkin();			_loopBt.changeSkin();			_pauseBt.changeSkin();			computePositions();		}		/**		 * Resize and replace the elements		 */		private function computePositions():void {			var totW:int, usedW:int, margin:int;			usedW			= _editBt.width + _pauseBt.width + _loopBt.width;			totW			= _width;			margin			= (totW - usedW) / 2;			_editBt.x		= 0;			_pauseBt.x		= _editBt.x + _editBt.width + margin;			_loopBt.x		= _pauseBt.x + _pauseBt.width + margin;			_hitBox.width	= _width;			_hitBox.height	= _editBt.height;		}								//__________________________________________________________ TIMER EVENTS		/**		 * Called when timer completes		 */		private function timerCompleteHandler(e:CustomTimerEvent):void {			_pauseBt.selected	= _timer.loop;			_loopBt.label		= (_timer.repeatCount > 0 && _timer.loop) ? _timer.repeatCount.toString() : "";			computePositions();		}				/**		 * Called when the timer starts		 */		private function timerStartHandler(e:CustomTimerEvent):void {			_pauseBt.selected = true;			computePositions();		}						//__________________________________________________________ MOUSE EVENTS				/**		 * Called when play/pause button is clicked		 */		private function togglePauseHandler(e:MouseEvent):void {			_timer.togglePause();			dispatchEvent(new TimerItemEvent(TimerItemEvent.PAUSE));		}				/**		 * Toggle the loop state of the timer		 */		private function toggleLoopHandler(e:MouseEvent):void	{			_timer.loop = _loopBt.selected;			_loopBt.label = "";			if(!_timer.paused) {				_timer.start();			}			dispatchEvent(new TimerItemEvent(TimerItemEvent.LOOP));		}		/**		 * Called when edit button is clicked		 */		private function editHandler(e:MouseEvent):void			{ dispatchEvent(new TimerItemEvent(TimerItemEvent.EDIT)); }			}}