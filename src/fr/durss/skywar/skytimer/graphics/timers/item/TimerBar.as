package fr.durss.skywar.skytimer.graphics.timers.item {	import fr.durss.skywar.skytimer.events.CustomTimerEvent;	import fr.durss.skywar.skytimer.time.CustomTimer;	import fr.durss.skywar.skytimer.time.TimeFormater;	import com.nurun.components.text.CssTextField;	import flash.display.Shape;	import flash.display.Sprite;	import flash.filters.DropShadowFilter;	/**	 * Displays the red bar that shows the timer progression.	 * 	 * @author Fran√ßois	 */	public class TimerBar extends Sprite {
		private var _done:Shape;		private var _total:Shape;		private var _timeTxt:CssTextField;		private var _width:int;		private var _height:int;		private var _timer:CustomTimer;		private var _color:Number;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>TimerBar</code> class.		 */		public function TimerBar() { initialize(); }						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the width of the component without simply scaling it		 */		override public function set width(value:Number):void {			_width = value;			computePositions();			if(_timer != null && _timer.complete) {				render();			}		}				/**		 * Sets the height of the component without simply scaling it		 */		override public function set height(value:Number):void { _height = value; computePositions(); }				/**		 * Sets the timer's reference		 */		public function set timer(value:CustomTimer):void {			if(_timer != null) {				_timer.removeEventListener(CustomTimerEvent.TIC_TIMER,	render);				_timer.removeEventListener(CustomTimerEvent.COMPLETE,	render);			}			_timer = value;			_timer.addEventListener(CustomTimerEvent.TIC_TIMER,	render);			_timer.addEventListener(CustomTimerEvent.COMPLETE,	render);			render();		}				/**		 * Sets the progress bar color.		 */		public function set color(value:Number):void { 			_color = value;			_total.graphics.clear();			_total.graphics.beginFill(value, .5);			_total.graphics.drawRect(0, 0, 10, 10);						_done.graphics.clear();			_done.graphics.beginFill(value, 1);			_done.graphics.drawRect(0, 0, 10, 10);		}				/**		 * gets the progress bar color.		 */		public function get color():Number { return _color; }						/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Updates the bar rendering		 */		public function update():void { render(); }				/**		 * Makes the component garbage collectable		 */		public function dispose():void {			removeChild(_total);			removeChild(_done);			removeChild(_timeTxt);		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the component		 */		private function initialize():void {			_total	= addChild(new Shape()) as Shape;			_done	= addChild(new Shape()) as Shape;			_timeTxt= addChild(new CssTextField()) as CssTextField;						_timeTxt.filters = [new DropShadowFilter(0,0,0,1,1.1,1.1,10,3)];						_total.graphics.beginFill(0x361F15, 1);			_total.graphics.drawRect(0, 0, 10, 10);						_done.graphics.beginFill(0xB66947, 1);			_done.graphics.drawRect(0, 0, 10, 10);			computePositions();		}				/**		 * Resize / replace the elements		 */		private function computePositions():void {			_done.height	= _height;			_total.width	= _width;			_total.height	= _height;			_timeTxt.x		= Math.round((_width - _timeTxt.width) * .5);			_timeTxt.y		= Math.round((_height - _timeTxt.height) * .5) + 1;		}		/**		 * Render the bar		 */		private function render(e:CustomTimerEvent = null):void {			var time:String, date:Date, percent:Number, currentTime:Number;			currentTime = _timer.elapsedTime;			percent		= currentTime / _timer.duration;			percent		= isNaN(percent)? 1 : percent;			date		= new Date(_timer.duration - currentTime);			time		= TimeFormater.format(date.time + Math.round(date.getMilliseconds()/1000)*1000);			_done.width = percent * _width;			_timeTxt.setText(time, _timer.complete? "timerTimeComplete" : "timerTime");			computePositions();		}	}}