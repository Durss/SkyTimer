package fr.durss.skywar.skytimer.graphics.timers.window.contents {	import fl.controls.ComboBox;	import fr.durss.components.ui.form.input.TextInput;	import fr.durss.skywar.skytimer.components.SubmitButton;	import fr.durss.skywar.skytimer.data.SharedObjectManager;	import fr.durss.skywar.skytimer.data.SkinMetrics;	import fr.durss.skywar.skytimer.graphics.timers.item.TimerItem;	import fr.durss.skywar.skytimer.graphics.timers.window.CustomAssetsSelector;	import fr.durss.skywar.skytimer.graphics.timers.window.contents.vo.Tag;	import fr.durss.skywar.skytimer.style.ComboStyle;	import com.nurun.components.text.CssTextField;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.utils.describeType;	/**	 * Displays the form that allows to create custom tags.	 * 	 * @author  François	 */	public class TagsContent extends Sprite implements WindowContent{				private var _labelTagList:CssTextField;		private var _tagsList:ComboBox;		private var _labelTagName:CssTextField;		private var _tagName:TextInput;		private var _skinSelector:CustomAssetsSelector;		private var _submitBt:SubmitButton;		private var _deleteBt:SubmitButton;		private var _width:Number;								/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>TagBuilder</code>		 */		public function TagsContent() { addEventListener(Event.ADDED_TO_STAGE, initialize); }						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the width of the component without simply scaling it.		 */		override public function set width(value:Number):void { _width = value; computePositions(); }		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Called to open the template		 */		public function open(itemToEdit:TimerItem = null, duration:Number = 0):void {			_tagsList.tabIndex	= 0;			_tagName.tabIndex	= 1;			_skinSelector.setTabIndexes(2, 3);			_tagsList.selectedIndex = -1;			_tagName.textfield.text = "";			_skinSelector.reset();			visible = true;			computePositions();		}				/**		 * Called to close the template		 */		public function close():void {			_tagsList.tabIndex	= -1;			_tagName.tabIndex	= -1;			_skinSelector.setTabIndexes(-1, -1);			visible = false;			_tagsList.close();			_skinSelector.close();		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class		 */		private function initialize(e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, initialize);			visible = false;						_labelTagList	= addChild(new CssTextField()) as CssTextField;			_tagsList		= addChild(new ComboBox()) as ComboBox;			_tagName		= addChild(new TextInput("inputName")) as TextInput;			_labelTagName	= addChild(new CssTextField()) as CssTextField;			_skinSelector	= addChild(new CustomAssetsSelector()) as CustomAssetsSelector;			_submitBt		= addChild(new SubmitButton()) as SubmitButton;			_deleteBt		= addChild(new SubmitButton("Supprimer")) as SubmitButton;						_labelTagList.wordWrap = true;			_labelTagName.wordWrap = true;			_labelTagList.setText("Charger un tag :",		"windowLabel");			_labelTagName.setText("Identifiant du tag :",	"windowLabel");			ComboStyle.setStyles(_tagsList);						_tagsList.focusManager.deactivate();			_tagsList.prompt = "--";			_tagsList.enabled = _tagsList.length > 0;			_tagsList.addEventListener(Event.CHANGE,		selectTagHandler);			_submitBt.addEventListener(MouseEvent.CLICK,	submitHandler);			_deleteBt.addEventListener(MouseEvent.CLICK,	deleteHandler);			SkinMetrics.getInstance().addEventListener(Event.CHANGE, changeSkinHandler);						populateTagsList();			computePositions();		}		/**		 * Resize and replace the elements		 */		private function computePositions():void {			_labelTagList.width	= _width - 20;			_tagsList.width		= _width;			_labelTagName.width = _width;			_tagName.width		= _width;			_skinSelector.width = _width;						_tagsList.y			= Math.round(_labelTagList.y + _labelTagList.height + 5);			_labelTagName.y		= Math.round(_tagsList.y + _tagsList.height + 5);			_tagName.y			= Math.round(_labelTagName.y + _labelTagName.height + 5);			_skinSelector.y		= Math.round(_tagName.y + _tagName.height + 5);						_submitBt.y			= Math.round(_skinSelector.y + _skinSelector.height) + 5;			_deleteBt.y			= _submitBt.y;						if(_tagsList.selectedIndex < 1) {				_tagsList.selectedIndex = -1;				_tagName.textfield.text = "";				_skinSelector.reset();				_submitBt.label	= "Créer";				_submitBt.x		= Math.round((_width - _submitBt.width) * .5);				_deleteBt.visible	= false;			}else{				_submitBt.label	= "Modifier";				var margin:int	= (_width - (_submitBt.width + _deleteBt.width)) / 3;				_submitBt.x		= margin;				_deleteBt.x		= Math.round(_submitBt.x + _submitBt.width + margin);				_deleteBt.visible	= true;			}		}				/**		 * Called when the skin is modified.<p>		 */		private function changeSkinHandler(e:Event):void {			ComboStyle.setStyles(_tagsList);			_submitBt.background = SkinMetrics.getInstance().skinSubmitButton;			_deleteBt.background = SkinMetrics.getInstance().skinSubmitButton;		}				/**		 * Populate the tags list.		 */		private function populateTagsList():void {			var i:int, len:int, tags:Array, tag:Tag;			tags	= SharedObjectManager.getInstance().getTags();			len		= tags.length;			_tagsList.removeAll();			_tagsList.addItem({label:"--"});			for(i = 0; i<len; ++i) {				tag = new Tag(tags[i]);				_tagsList.addItem({label:tag.name, data:tag});			}			_tagsList.enabled = _tagsList.length > 0;		}								//__________________________________________________________ MOUSE EVENTS				/**		 * Called when an item is selected from the combobox		 */		private function selectTagHandler(e:Event):void {			if(_tagsList.selectedIndex > 0) {				var item:Tag	= _tagsList.selectedItem["data"] as Tag;				_tagName.textfield.text = item.name;				_skinSelector.preselect(item.sound, item.color);			}			computePositions();		}		/**		 * Called when submit button is clicked		 */		private function submitHandler(e:MouseEvent):void {			if(_tagName.textfield.text.length == 0) return;			var sound:String	= String(describeType(_skinSelector.sound).@name).replace("::", ".");			var vo:Tag		= new Tag(null, _tagName.textfield.text, sound, _skinSelector.color);			if(!SharedObjectManager.getInstance().saveTag(vo)) {				_tagsList.addItem({label:vo.name, data:vo});			}			_tagsList.enabled		= true;			_tagsList.selectedIndex	= -1;			populateTagsList();			computePositions();		}				/**		 * Called when delete button is clicked		 */		private function deleteHandler(e:MouseEvent):void {			var sound:String	= String(describeType(_skinSelector.sound).@name).replace("::", ".");			var vo:Tag		= new Tag(null, _tagName.textfield.text, sound, _skinSelector.color);			SharedObjectManager.getInstance().deleteTag(vo);			_tagsList.removeItemAt(_tagsList.selectedIndex);			computePositions();		}	}}