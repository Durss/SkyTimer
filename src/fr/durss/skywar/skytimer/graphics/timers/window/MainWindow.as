package fr.durss.skywar.skytimer.graphics.timers.window {	import fr.durss.skywar.skytimer.components.STGraphicButton;	import fr.durss.skywar.skytimer.data.SkinMetrics;	import fr.durss.skywar.skytimer.events.WindowTimerEditionEvent;	import fr.durss.skywar.skytimer.graphics.WindowGraphics;	import fr.durss.skywar.skytimer.graphics.timers.Timers;	import fr.durss.skywar.skytimer.graphics.timers.item.TimerItem;	import fr.durss.skywar.skytimer.graphics.timers.window.contents.FilesContent;	import fr.durss.skywar.skytimer.graphics.timers.window.contents.TagsContent;	import fr.durss.skywar.skytimer.graphics.timers.window.contents.TimersContent;	import fr.durss.skywar.skytimer.graphics.timers.window.contents.WindowContent;	import gs.TweenLite;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.filters.DropShadowFilter;	/**	 * Displays the form window to add a timer	 * 	 * @author François	 */	public class MainWindow extends Sprite {		private var _background:WindowGraphics;		private var _timers:Timers;		private var _closeBt:STGraphicButton;		private var _contentTimer:TimersContent;		private var _contentTags:TagsContent;				private var _contentFiles:WindowContent;		private var _tabMenu:WindowTabsBuilder;		private var _opened:Boolean;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		public function MainWindow(timers:Timers) {			_timers = timers;			addEventListener(Event.ADDED_TO_STAGE, initialize);		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Gets the visual height of the window without taking consideration to content's bounds.		 */		override public function get height():Number{ return _background.height; }				/**		 * Gets if the window is opened.<br>		 */		public function get opened():Boolean { return _opened; }						/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Opens the window<p>		 * <p>		 * If no parameter is given, the window simply creates a new timer item.		 * If a <code>TimerItem</code> instance is given in function's parameter		 * the window will edit it.		 * 		 * @param itemToEdit	an optional <code>TimerItem</code> instance to edit.		 * @param duration		an optional duration to pre-fill the window.		 */		public function open(itemToEdit:TimerItem = null, duration:Number = 0):void {			_opened = true;			_tabMenu.selectedIndex	= 0;			_contentTimer.open(itemToEdit, duration);			_contentTags.close();			if(_contentFiles != null) {				_contentFiles.close();			}			TweenLite.to(this, .5, {autoAlpha:1});			computePositions();		}				/**		 * Called when window is closed to remove the tab indexes		 */		public function close():void {			_opened = false;			_contentTags.close();			_contentTimer.close();			if(_contentFiles != null) {				_contentFiles.close();			}			TweenLite.to(this, .5, {autoAlpha:0});		}								/* ******* *		 * PRIVATE *		 * ******* */		/**		 * initialize the component		 */		private function initialize(e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, initialize);			alpha			= 0;			visible			= false;						_background		= addChild(new WindowGraphics()) as WindowGraphics;			_contentTimer	= addChild(new TimersContent(_timers)) as TimersContent;			_contentTags	= addChild(new TagsContent()) as TagsContent;						/*FDT_IGNORE*/			CONFIG::Air			{			/*FDT_IGNORE*/				_contentFiles	= addChild(new FilesContent(stage)) as FilesContent;			/*FDT_IGNORE*/			}			/*FDT_IGNORE*/						_closeBt		= addChild(new STGraphicButton(SkinMetrics.getInstance().skinCloseAppButton)) as STGraphicButton;			_tabMenu		= addChild(new WindowTabsBuilder()) as WindowTabsBuilder;						_tabMenu.addTab("Timer");			_tabMenu.addTab("Tags", "Entrez le nom d'un tag défini ici dans le nom de votre timer pour automatiquement pré-sélectionner un son et une couleur.");			/*FDT_IGNORE*/			CONFIG::Air			{			/*FDT_IGNORE*/				_tabMenu.addTab("Fichier");			/*FDT_IGNORE*/			}			/*FDT_IGNORE*/			_tabMenu.selectedIndex	= 0;			_contentTags.width		= 214;			_contentTimer.width		= 214;			if(_contentFiles != null) {				DisplayObject(_contentFiles).width	= 214;			}						filters			= [new DropShadowFilter(0,0,0,1,20,20,1,3)];			_closeBt.filters= [new DropShadowFilter(0,0,0xffffff,1,1.2,1.2,5,3)];						_background.gotoAndStop(SkinMetrics.getInstance().frame);			_closeBt.addEventListener(MouseEvent.CLICK,							closeHandler);			_tabMenu.addEventListener(Event.CHANGE,								changeContenHandler);			_contentTimer.addEventListener(WindowTimerEditionEvent.EDIT_TIMER,	editCompleteHandler);			SkinMetrics.getInstance().addEventListener(Event.CHANGE,			changeSkinHandler);			computePositions();		}		/**		 * Replace the elements		 */		private function computePositions(e:Event = null):void {			var ref:DisplayObject;			_tabMenu.x			= 5;			_tabMenu.y			= -_tabMenu.height + 3;						_contentTags.x		= 7;			_contentTags.y		= 7;			_contentTimer.x		= 7;			_contentTimer.y		= 7;			if(_contentFiles != null) {				DisplayObject(_contentFiles).x	= 7;				DisplayObject(_contentFiles).y	= 7;			}						_background.width	= 228;			if(_tabMenu.selectedIndex == 0) {				ref	= _contentTimer;			}else if(_tabMenu.selectedIndex == 1) {				ref = _contentTags;			}else if(_tabMenu.selectedIndex == 2 && _contentFiles != null) {				ref = _contentFiles as DisplayObject;			}			_background.height	= Math.round(ref.height + ref.y * 2);						_closeBt.x		= Math.round(_background.width - _closeBt.width + 3);			_closeBt.y		= 1;		}				/**		 * Called when the skin is modified.		 */		private function changeSkinHandler(e:Event):void {			_background.gotoAndStop(SkinMetrics.getInstance().frame);			_closeBt.background = SkinMetrics.getInstance().skinCloseAppButton;			computePositions();		}										//__________________________________________________________ MOUSE EVENTS		/**		 * Called when close button is clicked		 */		private function closeHandler(e:MouseEvent):void { close(); }				/**		 * Called when a tab button is clicked		 */		private function changeContenHandler(e:Event):void {			_contentTags.close();			_contentTimer.close();			if(_contentFiles != null) {				_contentFiles.close();			}			switch(_tabMenu.selectedIndex) {				case 0: _contentTimer.open(); break;				case 1: _contentTags.open(); break;				case 2: _contentFiles.open(); break;			}			computePositions();		}				/**		 * Called when the edition or creation of a timer is completed		 */		private function editCompleteHandler(e:WindowTimerEditionEvent):void {			dispatchEvent(e);			close();		}	}}