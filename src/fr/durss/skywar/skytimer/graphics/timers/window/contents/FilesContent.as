package fr.durss.skywar.skytimer.graphics.timers.window.contents {	import fr.durss.skywar.skytimer.components.SubmitButton;	import fr.durss.skywar.skytimer.data.SharedObjectManager;	import fr.durss.skywar.skytimer.data.SkinMetrics;	import fr.durss.skywar.skytimer.graphics.timers.item.TimerItem;	import com.nurun.components.text.CssTextField;	import flash.desktop.ClipboardFormats;	import flash.desktop.NativeApplication;	import flash.desktop.NativeDragManager;	import flash.display.Sprite;	import flash.display.Stage;	import flash.events.Event;	import flash.events.InvokeEvent;	import flash.events.MouseEvent;	import flash.events.NativeDragEvent;	import flash.filesystem.File;	import flash.filesystem.FileMode;	import flash.filesystem.FileStream;	import flash.net.FileFilter;	import flash.net.FileReference;	import flash.utils.ByteArray;	/**	 * Displays the files tab of the timer's window.	 * 	 * @author  Fran√ßois	 */	public class FilesContent extends Sprite implements WindowContent {				private var _label:CssTextField;		private var _save:SubmitButton;		private var _load:SubmitButton;		private var _width:Number;		private var _fr:FileReference;		private var _downloadMode:Boolean;		private var _stage:Stage;
						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>FilesContent</code>		 */		public function FilesContent(stage:Stage) { initialize(stage); }						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the width of the content without simply scaling it.		 */		override public function set width(value:Number):void { _width = value; computePositions(); }		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Called to open the template		 */		public function open(itemToEdit:TimerItem = null, duration:Number = 0):void {			visible = true;			computePositions();		}				/**		 * Called to close the template		 */		public function close():void { visible = false; }						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class		 */		private function initialize(stage:Stage):void {			_stage = stage;			_label = addChild(new CssTextField()) as CssTextField;			_load	= addChild(new SubmitButton("Charger")) as SubmitButton;			_save	= addChild(new SubmitButton("Enregistrer")) as SubmitButton;			_fr		= new FileReference();						_label.wordWrap = true;			_label.setText("Vous pouvez ici enregistrer tous<br/>les timers en cours dans un fichier <b>.swt</b> que vous pourrez ensuite charger sur un autre ordinateur.", "windowLabel");						_load.addEventListener(MouseEvent.CLICK,	clickButtonHandler);			_save.addEventListener(MouseEvent.CLICK,	clickButtonHandler);			_fr.addEventListener(Event.COMPLETE,		completeHandler);			_fr.addEventListener(Event.SELECT,			selectFileHandler);			_fr.addEventListener(Event.CANCEL,			cancelFileSelectionHandler);			_stage.addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER,		dragEnterHandler);			_stage.addEventListener(NativeDragEvent.NATIVE_DRAG_DROP,		dragCompleteHandler);			SkinMetrics.getInstance().addEventListener(Event.CHANGE,		changeSkinHandler);			NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, invokeAppHandler);						computePositions();		}				/**		 * Called when an item is draged over the application.		 */		private function dragEnterHandler(e:NativeDragEvent):void {			//check and see if files are being drug in			if(e.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT)) {				//get the array of files				var files:Array = e.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;				var i:int, len:int;				len = files.length;				for(i = 0; i < len; ++i) {					if(File(files[0]).type != ".swt"){						return;					}				}				NativeDragManager.acceptDragDrop(_stage);			}		}		/**		 * Called when user drops file(s) over the application.		 */		private function dragCompleteHandler(e:NativeDragEvent):void {			var files:Array = e.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;			var i:int, len:int;			len = files.length;			for(i = 0; i < len; ++i) {				loadFile(File(files[i]));			}		}		/**		 * Called when the skin is modified.<p>		 */		private function changeSkinHandler(e:Event):void {			_load.background = SkinMetrics.getInstance().skinSubmitButton;			_save.background = SkinMetrics.getInstance().skinSubmitButton;		}		/**		 * Called when a file is selected on browse window		 */		private function selectFileHandler(e:Event):void {			if(_downloadMode) {				_fr.load();			}		}		/**		 * Called file selectionis canceled.		 */		private function cancelFileSelectionHandler(e:Event):void {			_load.enabled = true;			_save.enabled = true;		}				/**		 * Called when file loading/uploading completes		 */		private function completeHandler(e:Event):void {			_load.enabled = true;			_save.enabled = true;			if(_downloadMode) {				SharedObjectManager.getInstance().setObjectTimers(_fr.data.readObject());			}		}		/**		 * Resize and replace the elements		 */		private function computePositions():void {			_label.x	= 5;			_label.width= _width;			_load.width = _width;			_save.width = _width;			_load.y		= Math.round(_label.y + _label.height + 5);			_save.y		= Math.round(_load.y + _load.height + 5);		}				/**		 * Called when a button is clicked		 */		private function clickButtonHandler(e:MouseEvent):void {			if(e.target == _load) {				_fr.browse([new FileFilter("Document SWT", "*.swt")]);				_downloadMode = true;			}else{				var data:ByteArray = new ByteArray();				data.writeObject(SharedObjectManager.getInstance().getObjectTimers());				_fr.save(data, "timers.swt");				_downloadMode = false;			}			_load.enabled = false;			_save.enabled = false;		}				/**		 * Called when application is invoked.<br>		 * <br>		 * The application could be invoked, for exemple, by opening a SWT file		 * that have been associated to the SkyTimer.		 */		private function invokeAppHandler(e:InvokeEvent):void {			var i:int, len:int, file:String;			len = e.arguments.length;			for(i = 0; i < len; ++i) {				file = e.arguments[i] as String;				if(file.substr(file.lastIndexOf(".") + 1).toLowerCase() == "swt") {					loadFile(File.applicationDirectory.resolvePath(e.arguments[i]));				}			}		}				/**		 * Loads a file vie FileStream and creates timers with its content.		 */		private function loadFile(file:File):void {			var fs:FileStream = new FileStream();			fs.open(file, FileMode.READ);			SharedObjectManager.getInstance().setObjectTimers(fs.readObject());		}	}}