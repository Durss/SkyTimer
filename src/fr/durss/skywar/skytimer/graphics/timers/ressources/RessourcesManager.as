package fr.durss.skywar.skytimer.graphics.timers.ressources {	import fr.durss.components.ui.form.input.TextInput;	import fr.durss.components.ui.tooltip.SimpleToolTip;	import fr.durss.components.ui.tooltip.ToolTipAlign;	import fr.durss.skywar.skytimer.data.SharedObjectManager;	import fr.durss.skywar.skytimer.events.SharedObjectManagerEvent;	import fr.durss.skywar.skytimer.graphics.IconEther;	import fr.durss.skywar.skytimer.graphics.IconMaterial;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	/**	 * Displays the ressources bar at the bottom of the timers.	 * 	 * @author François	 */	public class RessourcesManager extends Sprite {		private var _materials:IconMaterial;		private var _ethers:IconEther;		private var _inputM:TextInput;		private var _inputE:TextInput;		private var _tooltip:SimpleToolTip;		private var _width:int;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		public function RessourcesManager() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		override public function set width(value:Number):void { _width = value; computePositions(); }				/**		 * Gets the visual width of the component without taking consideration to the tooltip.		 */		override public function get width():Number { return _width; }				/**		 * Gets the visual height of the component without taking consideration to the tooltip.		 */		override public function get height():Number { return _inputE.height; }; 		/* ****** *		 * PUBLIC *		 * ****** */						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initializes the class		 */		private function initialize():void {			_inputM		= addChild(new TextInput()) as TextInput;			_inputE		= addChild(new TextInput()) as TextInput;			_ethers		= addChild(new IconEther()) as IconEther;			_materials	= addChild(new IconMaterial()) as IconMaterial;			_tooltip	= addChild(new SimpleToolTip()) as SimpleToolTip;			_width		= 200;						_inputM.textfield.restrict = "[0-9]";			_inputE.textfield.restrict = "[0-9]";			_inputM.textfield.text = SharedObjectManager.getInstance().materials.toString();			_inputE.textfield.text = SharedObjectManager.getInstance().ethers.toString();						_materials.addEventListener(MouseEvent.ROLL_OVER,	overInputHandler);			_ethers.addEventListener(MouseEvent.ROLL_OVER,		overInputHandler);			_materials.addEventListener(MouseEvent.ROLL_OUT,	outInputHandler);			_ethers.addEventListener(MouseEvent.ROLL_OUT,		outInputHandler);			_inputM.addEventListener(Event.CHANGE,				changeValueHandler);			_inputE.addEventListener(Event.CHANGE,				changeValueHandler);			SharedObjectManager.getInstance().addEventListener(SharedObjectManagerEvent.SESSION_CHANGE, changeSessionHandler);						computePositions();		}		/**		 * Called when an icon is rolled over		 */		private function overInputHandler(e:MouseEvent):void {			var txt:String = "";			if(e.target == _ethers) {				txt		= "Entrez le nombre d'<b>Ethers</b> gagnés par cycle pour avoir une estimation des gains en fin de timer.";			}else if(e.target == _materials) {				txt		= "Entrez le nombre de <b>Materiaux</b> gagnés par cycle pour avoir une estimation des gains en fin de timer.";			}			_tooltip.width = 130;			_tooltip.open(txt, "toolTipContent", ToolTipAlign.TOP_RIGHT);		}		/**		 * Called when an icon is rolled out.		 */		private function outInputHandler(e:MouseEvent):void { _tooltip.close(); }		/**		 * Called when an input's value changes		 */		private function changeValueHandler(e:Event):void {			SharedObjectManager.getInstance().ethers	= parseInt(_inputE.textfield.text);			SharedObjectManager.getInstance().materials	= parseInt(_inputM.textfield.text);		}		/**		 * Resize / replace the elements.		 */		private function computePositions():void {			_inputM.x		= 0;			_inputM.width	= 60;			_inputE.x		= _width - _inputE.width;			_inputE.width	= 60;			_ethers.x		= _inputE.x + 2;			_materials.x	= _inputM.x + 2;			_ethers.y		= 2;			_materials.y	= 2;		}				/**		 * Called when the session is modified.		 */		private function changeSessionHandler(e:SharedObjectManagerEvent):void {			_inputM.textfield.text = SharedObjectManager.getInstance().materials.toString();			_inputE.textfield.text = SharedObjectManager.getInstance().ethers.toString();		}	}}