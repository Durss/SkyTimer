package fr.durss.skywar.skytimer.graphics.alert {	import fr.durss.skywar.skytimer.data.SharedObjectManager;	import fr.durss.skywar.skytimer.data.SkinMetrics;	import fr.durss.skywar.skytimer.graphics.SystemAlertIconGraphic;	import fr.durss.skywar.skytimer.graphics.ToolTipBack;	import fr.durss.skywar.skytimer.graphics.timers.item.TimerItem;	import gs.TweenLite;	import gs.easing.Sine;	import com.nurun.components.text.CssTextField;	import com.nurun.utils.text.TextBounds;	import flash.desktop.NativeApplication;	import flash.display.NativeWindow;	import flash.display.NativeWindowInitOptions;	import flash.display.NativeWindowSystemChrome;	import flash.display.NativeWindowType;	import flash.display.Screen;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	import flash.text.AntiAliasType;	import flash.utils.Timer;	/**	 * Displays the system alerts.<br>	 * <br>	 * A system alert is the little window that shows up at the bottom right	 * of the screen to display the timers that completes.	 * 	 * @author  Francois	 */	public class SystemAlert extends Sprite {				private var _windowContainer:Sprite;		private var _background:ToolTipBack;		private var _alertIcon:SystemAlertIconGraphic;		private var _window:NativeWindow;		private var _warningsStack:Array;		private var _content:CssTextField;		private var _opened:Boolean;		private var _timerClose:Timer;		private var _timerOpen:Timer;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>SystemAlert</code>.<br>		 */		public function SystemAlert() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Opens the alert window.		 */		public function activate(timer:TimerItem):void {			if(!SharedObjectManager.getInstance().enableAlerts) return;						var i:int, len:int, txt:String, screen:Screen;			_warningsStack.push(timer.name);			len = _warningsStack.length;			txt = "<p align=\"center\"><font size=\"20\"><b>- SkyTimer -</b></font><br /><b>Les timers suivants sont terminés</b></p><br />";			for(i = 0; i < len; ++i) {				txt += "• "+_warningsStack[i]+"<br />";			}			_content.setText(txt);						var bounds:Rectangle = TextBounds.getBounds(_content);						_content.x		= -bounds.x + 5;			_content.y		= -bounds.y + 5;						screen			= Screen.getScreensForRectangle(new Rectangle(stage.nativeWindow.x, stage.nativeWindow.y, 1, 1))[0] as Screen;			_window.width	= bounds.width + 10;			_window.height	= bounds.height + 10;			_window.x		= screen.visibleBounds.right - _window.width - 2;			_window.y		= screen.visibleBounds.bottom - _window.height - 2;						_background.width	= _window.width;			_background.height	= _window.height;						_window.activate();			computePositions();			open();		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.<br>		 */		private function initialize():void {			_warningsStack			= [];			_windowContainer		= new Sprite();			_background				= _windowContainer.addChild(new ToolTipBack()) as ToolTipBack;			_alertIcon				= _windowContainer.addChild(new SystemAlertIconGraphic()) as SystemAlertIconGraphic;			_content				= _windowContainer.addChild(new CssTextField("toolTipContent")) as CssTextField;						_content.antiAliasType = AntiAliasType.NORMAL;						var options:NativeWindowInitOptions = new NativeWindowInitOptions();			options.maximizable		= false;			options.minimizable		= false;			options.resizable		= false;			options.systemChrome	= NativeWindowSystemChrome.NONE;			options.transparent		= true;			options.type			= NativeWindowType.LIGHTWEIGHT;						_window					= new NativeWindow(options);			_window.stage.scaleMode	= StageScaleMode.NO_SCALE;			_window.stage.align		= StageAlign.TOP_LEFT;			_window.alwaysInFront	= true;						_timerClose	= new Timer(15000, 1);			_timerClose.addEventListener(TimerEvent.TIMER_COMPLETE, closeTimerHandler);						_timerOpen	= new Timer(20000, 1);			_timerOpen.addEventListener(TimerEvent.TIMER_COMPLETE, openTimerHandler);						_content.mouseEnabled = false;			_windowContainer.buttonMode = true;			_windowContainer.focusRect	= false;			_window.stage.addChild(_windowContainer);			_alertIcon.gotoAndStop(SkinMetrics.getInstance().frame);			_background.gotoAndStop(SkinMetrics.getInstance().frame);						_windowContainer.addEventListener(MouseEvent.CLICK,			clickWindowHandler);			_windowContainer.addEventListener(MouseEvent.ROLL_OVER,		rollOverHandler);			_windowContainer.addEventListener(MouseEvent.ROLL_OUT,		rollOutHandler);			SkinMetrics.getInstance().addEventListener(Event.CHANGE,	changeSkinHandler);						computePositions();		}		/**		 * Opens the tooltip.		 */		private function open():void {			if(!_opened) {				_windowContainer.y	= _window.height + 10;				TweenLite.to(_windowContainer, .5, {y:0, ease:Sine.easeInOut});			}			_opened = true;			if(!_windowContainer.hitTestPoint(_windowContainer.mouseX, _windowContainer.mouseY)){				_timerClose.reset();				_timerClose.start();			}		}				/**		 * Closes the window.		 */		private function close():void {			if(!_opened) return;			_opened = false;			TweenLite.to(_windowContainer, .5, {y:_window.height + 10, ease:Sine.easeInOut});		}		/**		 * Resize and replace the elements.<br>		 */		private function computePositions():void {			_content.x		= 2;			_alertIcon.x	= Math.round((_background.width - _alertIcon.width) * .5);			_alertIcon.y	= Math.round((_background.height - _alertIcon.height) * .5);		}		/**		 * Called when the skin is modified.		 */		private function changeSkinHandler(e:Event):void {			_alertIcon.gotoAndStop(SkinMetrics.getInstance().frame);			_background.gotoAndStop(SkinMetrics.getInstance().frame);		}				/**		 * Called when the close timer completes.		 */		private function closeTimerHandler(e:TimerEvent):void {			close();			var mainWindow:NativeWindow = NativeApplication.nativeApplication.openedWindows[0] as NativeWindow;			if(!mainWindow.visible) {				_timerOpen.reset();				_timerOpen.start();				_warningsStack = [];			}		}		/**		 * Called when the open timer completes.		 */		private function openTimerHandler(e:TimerEvent):void {			open();		}				/**		 * Called when window is clicked.		 */		private function clickWindowHandler(e:MouseEvent):void {			_warningsStack = [];			close();			_timerOpen.stop();			_timerClose.stop();			_warningsStack = [];		}				/**		 * Called on window's roll over.		 */		private function rollOverHandler(e:MouseEvent):void {			open();			_timerOpen.stop();			_timerClose.stop();		}		/**		 * Called on window's roll out.		 */		private function rollOutHandler(e:MouseEvent):void {			if(_warningsStack.length == 0) return;			_timerClose.reset();			_timerClose.start();		}	}}