package fr.durss.skywar.skytimer.graphics.web {	import fr.durss.skywar.skytimer.data.SharedObjectManager;	import fr.durss.components.ui.form.input.TextInput;	import fr.durss.skywar.skytimer.components.SubmitButton;	import fr.durss.skywar.skytimer.data.SkinMetrics;	import gs.TweenLite;	import com.nurun.components.text.CssTextField;	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.FocusEvent;	import flash.events.IOErrorEvent;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	import flash.text.TextFieldAutoSize;	import flash.ui.Keyboard;	import flash.utils.Dictionary;	/**	 * Displasy the feedback form.	 * 	 * @author  Francois	 */	public class Feedback extends Sprite {		private var _title:CssTextField;		private var _pseudo:TextInput;		private var _message:TextInput;		private var _submit:SubmitButton;		private var _width:int;		private var _defaults:Dictionary;		private var _loader:URLLoader;		private var _formContainer:Sprite;		private var _formMask:Shape;		private var _charsPseudo:CssTextField;		private var _charsMessage:CssTextField;				private const _maxPseudo:int = 100;		private const _maxMessage:int = 1000;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>Feedback</code>.<br>		 */		public function Feedback() {			initialize();		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		override public function set width(value:Number):void {			_width = value;			computePositions();		}				override public function get height():Number {			return _formContainer.height;		}						/* ****** *		 * PUBLIC *		 * ****** */						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.<br>		 */		private function initialize():void {			_defaults		= new Dictionary();						_formContainer	= addChild(new Sprite()) as Sprite;			_formMask		= addChild(new Shape()) as Shape;			_title			= _formContainer.addChild(new CssTextField("windowLabel")) as CssTextField;			_submit			= _formContainer.addChild(new SubmitButton("Envoyer")) as SubmitButton;			_pseudo			= _formContainer.addChild(new TextInput("inputNormal")) as TextInput;			_message		= _formContainer.addChild(new TextInput("inputNormal")) as TextInput;			_charsPseudo	= _formContainer.addChild(new CssTextField("windowLabel")) as CssTextField;			_charsMessage	= _formContainer.addChild(new CssTextField("windowLabel")) as CssTextField;						_formMask.graphics.beginFill(0xCC0000, .5);			_formMask.graphics.drawRect(0, 0, 100, 10);						_message.textfield.setText("Message");			_pseudo.textfield.setText("Pseudo");						_charsPseudo.setText("0/" + _maxPseudo);			_charsMessage.setText("0/" + _maxMessage);			_charsMessage.autoSize = TextFieldAutoSize.RIGHT;						_defaults[_pseudo]	= _pseudo.textfield.text;			_defaults[_message]	= _message.textfield.text;						_formContainer.mask = _formMask;						_title.wordWrap = true;			_title.setText("<p align='center'>Une suggestion? Un bug trouv√©?<br />Un mot doux? Une insulte?</p>");						_submit.enabled = false;						_submit.addEventListener(MouseEvent.CLICK,				submitHandler);			_pseudo.addEventListener(FocusEvent.FOCUS_IN,			focusInHandler);			_pseudo.addEventListener(FocusEvent.FOCUS_OUT,			focusOutHandler);			_message.addEventListener(FocusEvent.FOCUS_IN,			focusInHandler);			_message.addEventListener(FocusEvent.FOCUS_OUT,			focusOutHandler);			_pseudo.textfield.addEventListener(Event.CHANGE,		changetHandler);			_message.textfield.addEventListener(Event.CHANGE,		changetHandler);			_formContainer.addEventListener(MouseEvent.ROLL_OVER,	rollOverHandler);			_formContainer.addEventListener(MouseEvent.ROLL_OUT,	rollOutHandler);			addEventListener(KeyboardEvent.KEY_UP,					keyUpHandler);			SkinMetrics.getInstance().addEventListener(Event.CHANGE,changeSkinHandler);			addEventListener(Event.ADDED_TO_STAGE,					addedToStageHandler);						computePositions();		}		/**		 * Resize and replace the elements.<br>		 */		private function computePositions():void {			_title.width	= _width;			_message.width	= _width;			_pseudo.width	= _width;						_pseudo.y 		= Math.round(_title.y + _title.height);			_message.y		= Math.round(_pseudo.y + _pseudo.height);			_submit.y		= Math.round(_message.y + _message.height);			_submit.x		= Math.round((_width - _submit.width) * .5);						_charsPseudo.x	= 2;			_charsPseudo.y	= Math.round(_submit.y + (_submit.height - _charsPseudo.height) * .5);						_charsMessage.x = _width - _charsMessage.width - 2;			_charsMessage.y	= _charsPseudo.y;						_formMask.height= _submit.y + _submit.height;			_formMask.width	= _width;						_formContainer.graphics.clear();			_formContainer.graphics.beginFill(SkinMetrics.getInstance().feedbackBackgroundColor, 1);			_formContainer.graphics.drawRect(0, 0, _width, height);						_formContainer.y = _formContainer.height - _title.height;		}				/**		 * Called when the skin is modified		 */		private function changeSkinHandler(e:Event):void {			_submit.changeSkin();			computePositions();		}		/**		 * Called when a key is released.		 */		private function keyUpHandler(e:KeyboardEvent):void {			if(e.keyCode == Keyboard.ENTER && _submit.enabled) {				submitHandler();			}		}				/**		 * Called when the form is rolled over.		 */		private function rollOverHandler(e:MouseEvent):void {			TweenLite.to(_formContainer, .5, {y:0, overwrite:1});		}		/**		 * Called when the form is rolled out.		 */		private function rollOutHandler(e:MouseEvent = null, delay:Number = 1.5):void {			if(_pseudo.hasFocus() || _message.hasFocus()) return;			TweenLite.to(_formContainer, .5, {y:_formContainer.height - _title.height, overwrite:1, delay:delay});		}		/**		 * Called when an input receives focus.		 */		private function focusInHandler(e:FocusEvent):void {			if(TextInput(e.currentTarget).textfield.text == _defaults[e.currentTarget]) {				TextInput(e.currentTarget).setText("");			}		}		/**		 * Called when an input looses focus.		 */		private function focusOutHandler(e:FocusEvent):void {			if(TextInput(e.currentTarget).textfield.text == "") {				TextInput(e.currentTarget).setText(_defaults[e.currentTarget]);			}		}				/**		 * Called when an input's content changes.		 */		private function changetHandler(e:Event):void {			var txt1:String		= _pseudo.textfield.text.replace(/^\s*(.*?)\s*$/gi, "$1");			var txt2:String		= _message.textfield.text.replace(/^\s*(.*?)\s*$/gi, "$1");			if(txt1 == _defaults[_pseudo]) txt1 = "";			if(txt2 == _defaults[_message]) txt2 = "";			_submit.enabled		= txt1.length > 0 && txt2.length > 0;						if(txt1.length > _maxPseudo) {				txt1 = txt1.substr(0, _maxPseudo);				_pseudo.setText(txt1);			}						if(txt2.length > _maxMessage) {				txt2 = txt2.substr(0, _maxMessage);				_message.setText(txt2);			}						_charsPseudo.setText(txt1.length + "/" + _maxPseudo);			_charsMessage.setText(txt2.length + "/" + _maxMessage);		}		/**		 * Called when submit button is clicked.		 */		private function submitHandler(e:MouseEvent = null):void {			var request:URLRequest	= new URLRequest("http://skyWar.free.fr/apps/skytimer/feedback.php");			var vars:URLVariables	= new URLVariables();			vars.pseudo		= _pseudo.textfield.text.replace(/^\s*(.*?)\s*$/gi, "$1");			vars.message	= _message.textfield.text.replace(/^\s*(.*?)\s*$/gi, "$1");			vars.guid		= SharedObjectManager.getInstance().guid;			request.data	= vars;			request.method	= URLRequestMethod.POST;						_loader = new URLLoader();			_loader.addEventListener(Event.COMPLETE, loadCompleteHandler);			_loader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			_loader.load(request);						_submit.label = "Patientez svp...";			_submit.enabled = false;			_submit.x = Math.round((_width - _submit.width) * .5);		}		/**		 * Called when feedback sending completes.		 */		private function loadCompleteHandler(e:Event):void {			if(parseInt(_loader.data) == 1) {				_title.setText("<p align='center'>C'est dans la boite, merci =)</p>");				_formContainer.removeChild(_pseudo);				_formContainer.removeChild(_message);				_formContainer.removeChild(_submit);				TweenLite.to(_formContainer, .2, {y:_formContainer.height - _title.height, overwrite:1});				_formContainer.removeEventListener(MouseEvent.ROLL_OVER,	rollOverHandler);				_formContainer.removeEventListener(MouseEvent.ROLL_OUT,		rollOutHandler);			}			_submit.label = "...Error...";			_submit.enabled = true;			_submit.x = Math.round((_width - _submit.width) * .5);		}		/**		 * Called if an error occurd while sending feedback.		 */		private function ioErrorHandler(e:IOErrorEvent):void {			_submit.label = "...Error...";			_submit.enabled = true;			_submit.x = Math.round((_width - _submit.width) * .5);					}								//__________________________________________________________ FOCUS_OUT CLOSE				/**		 * Called when the component is added to a display object container.		 */		private function addedToStageHandler(e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);			addEventListener(MouseEvent.CLICK,			clickThisHandler);			parent.addEventListener(MouseEvent.CLICK,	clickParentHandler);		}				/**		 * Called when clicking on the feedback container.		 */		private function clickThisHandler(e:MouseEvent):void {			e.stopPropagation();		}		/**		 * Called when clicking on the feedback's parent.		 */		private function clickParentHandler(e:MouseEvent):void {			rollOutHandler(null, 0);		}	}}