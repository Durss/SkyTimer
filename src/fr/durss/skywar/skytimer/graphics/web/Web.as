package fr.durss.skywar.skytimer.graphics.web {	import fr.durss.skywar.skytimer.components.LoadBar;	import fr.durss.skywar.skytimer.components.SubmitButton;	import fr.durss.skywar.skytimer.data.AppVersion;	import fr.durss.skywar.skytimer.data.SharedObjectManager;	import fr.durss.skywar.skytimer.data.SkinMetrics;	import fr.durss.skywar.skytimer.events.UpdateEvent;	import fr.durss.skywar.skytimer.graphics.AbstractView;	import com.nurun.components.scroll.ScrollPane;	import com.nurun.components.scroll.scrollable.ScrollableTextField;	import com.nurun.components.scroll.scroller.scrollbar.Scrollbar;	import com.nurun.components.text.CssTextField;	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.events.ProgressEvent;	import flash.events.TimerEvent;	import flash.net.FileReference;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	import flash.net.navigateToURL;	import flash.system.Security;	import flash.ui.Keyboard;	import flash.utils.Timer;	/**	 * Bug du getTImer() chez un utilisateur.	 * 2930j3h54m46s	 * 	 * @author François	 */	public class Web extends AbstractView {		private var _downloadUpdate:SubmitButton;		private var _label:CssTextField;		private var _loader:URLLoader;		private var _fr:FileReference;		private var _timerCheck:Timer;		private var _scrollbar:Scrollbar;		private var _scrollpane:ScrollPane;		private var _updateDetails:ScrollableTextField;		private var _isOpening:Boolean = true;		private var _ignoreStats:int;		private var _loadbar:LoadBar;		private var _feedback:Feedback;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		public function Web() {			addEventListener(Event.ADDED_TO_STAGE, initialize);		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/* ****** *		 * PUBLIC *		 * ****** */						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * initializes the template		 */		private function initialize(e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, initialize);						Security.loadPolicyFile("http://skywar.free.fr/apps/skytimer/crossdomainSkytimer.xml");						_updateDetails	= addChild(new ScrollableTextField()) as ScrollableTextField;			_scrollbar		= addChild(new Scrollbar(SkinMetrics.getInstance().skinScroll)) as Scrollbar;			_scrollpane		= addChild(new ScrollPane(_updateDetails, _scrollbar)) as ScrollPane;			_label			= addChild(new CssTextField()) as CssTextField;			_downloadUpdate	= addChild(new SubmitButton("Télécharger la nouvelle version")) as SubmitButton;			_loadbar		= addChild(new LoadBar()) as LoadBar;			_feedback		= addChild(new Feedback()) as Feedback;						_loadbar.visible	= false;			_scrollpane.x		= 5;			_scrollpane.y		= 10;			_scrollpane.width	= WIDTH - 10;			_scrollpane.height	= HEIGHT - 100;			_scrollpane.autoHideScrollers = true;						_downloadUpdate.height	= 23;			_downloadUpdate.visible = false;			_label.width			= WIDTH;			_label.wordWrap			= true;			_updateDetails.wordWrap	= true;						//Update checking interval in hours			var interval:Number = .5;			_timerCheck	= new Timer(interval * 60 * 60 * 1000);			_timerCheck.addEventListener(TimerEvent.TIMER, checkForUpdate);			_timerCheck.start();						_downloadUpdate.addEventListener(MouseEvent.CLICK, submitHandler);			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);						//This timer is here just to let me having time to press CTRL			//key to ignore stats server side and display my GUID (o add it to ignore list).			var timer:Timer = new Timer(2000, 1);			timer.addEventListener(TimerEvent.TIMER, checkForUpdate);			timer.start();			_label.setText("Recherche de mise à jour<br/>en cours ...", "downloadLabel");						_feedback.width		= WIDTH;			_feedback.y			= Math.round(HEIGHT - _feedback.height);			computePositions();		}		/**		 * Replace the elements		 */		private function computePositions():void {			_label.x			= Math.round((WIDTH - _label.width) * .5);			_label.y			= Math.round((HEIGHT - _label.height) * .5);						_downloadUpdate.y	= Math.round(_scrollpane.y + Math.min(_scrollpane.height, _updateDetails.textHeight) + 10);			_downloadUpdate.x	= Math.round((WIDTH - _downloadUpdate.width) * .5);			_scrollpane.update();		}												//__________________________________________________________ UTILS				/**		 * Converts a String version code into a Number equivalent.		 */		private function convertVersionToNumber(v:String):Number {			v = v.replace(/^0*\./, ".");			var ret:String = v.replace(new RegExp("\\.", "gi"), "");			if(v.substr(0, 1) == ".") {				ret = "."+ret; 			}			return parseFloat(ret);		}				/**		 * Called when a key is pressed		 */		private function keyDownHandler(e:KeyboardEvent):void {			if(e.keyCode == Keyboard.CONTROL) {				_ignoreStats = _ignoreStats | 0x2;			}			if(e.keyCode == Keyboard.PAGE_UP) {				_ignoreStats = _ignoreStats | 0x1;			}		}												//__________________________________________________________ UPDATES HANDLERS		/**		 * Check if an update is available		 */		private function checkForUpdate(e:TimerEvent):void {			if(stage.hasEventListener(KeyboardEvent.KEY_DOWN)){				stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			}			if(_loader != null) {				_loader.removeEventListener(Event.COMPLETE, loadCompleteHandler);				_loader.removeEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			}			var appType:String;			try {				stage.nativeWindow;				appType = "AIR";			}catch(evt:Error){				appType = "SWF";			}			//			var request:URLRequest = new URLRequest("../version.xml");			var request:URLRequest	= new URLRequest("http://skyWar.free.fr/apps/skytimer/updaterV2.php?cachKiller="+new Date().getTime().toString());			var vars:URLVariables	= new URLVariables();			vars.open		= _isOpening? "1" : "0";			vars.guid		= SharedObjectManager.getInstance().guid;			vars.appType	= appType;			vars.v			= AppVersion.VERSION;			if(_ignoreStats == 0x3){				vars.ignore = "true";			}			request.method	= URLRequestMethod.POST;			request.data	= vars;			_loader = new URLLoader(request);			_loader.addEventListener(Event.COMPLETE, loadCompleteHandler);			_loader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			_label.setText("Recherche de mise à jour<br/>en cours ...", "downloadLabel");			_isOpening = false;		}				/**		 * Called if url loading fails.		 */		private function ioErrorHandler(e:IOErrorEvent):void {			_label.setText("Recherche de mise à jour échouée!", "downloadLabel");			computePositions();		}		/**		 * Called when XML version is loaded		 */		private function loadCompleteHandler(e:Event):void {			var i:int, txt:String, version:String, xml:XML, updates:XMLList;			try {				xml = new XML(_loader.data);			}catch(event:Error) {				_label.setText("Recherche de mise à jour échouée!<br/><br/><font size='12'>(XML bad formated)</font>", "downloadLabel");				computePositions();				return;			}			version = xml.child("version")[0];						if(convertVersionToNumber(version) > convertVersionToNumber(AppVersion.VERSION)) {				_downloadUpdate.enabled = true;				_downloadUpdate.visible = true;				_label.visible	= false;				updates			= xml.child("updates").child("update");				version			= (version.substr(0,1) == ".")? "0"+version : version;				txt				= "<p align=\"center\"><span class=\"updateNumber\">Version "+version+"</span></p><br/>";				for(i = 0; i<updates.length(); i++) {					txt += "<span class=\"updateNumber\">"+(i+1)+"</span> - "+updates[i]+"<br/><br/>";				}				_updateDetails.setText(txt, "updates");				_downloadUpdate.label = "Télécharger (AIR)";				dispatchEvent(new UpdateEvent(UpdateEvent.UPDATE_AVAILABLE));			} else {				_label.selectable	= _ignoreStats == 0x3;				var guid:String		= _label.selectable ? "<br /><br/><font size=\"10\">Application's GUID :<br/>"+SharedObjectManager.getInstance().guid+"</font>" : "";				_label.setText("Vous avez la dernière version"+guid, "downloadLabel");			}			computePositions();		}										//__________________________________________________________ DOWNLOAD EVENTS		/**		 * Called when submit button is clicked to download the last version.		 */		private function submitHandler(e:MouseEvent):void {			var dlURL:String = "http://skywar.free.fr/apps/skytimer/SkyTimer.air";			try {				_fr = new FileReference();				_fr.download(new URLRequest(dlURL));				_fr.addEventListener(Event.COMPLETE, downloadCompleteHandler);				_fr.addEventListener(ErrorEvent.ERROR, downloadErrorHandler);				_fr.addEventListener(IOErrorEvent.IO_ERROR, downloadErrorHandler);				_fr.addEventListener(ProgressEvent.PROGRESS, loadProgressHandler);			}catch(event:Error) {				var request : URLRequest = new URLRequest(dlURL);				navigateToURL(request);			}			_loadbar.percent		= 0;			_loadbar.visible		= true;			_downloadUpdate.label	= "patientez svp...";			_downloadUpdate.enabled	= false;			_loadbar.x				= 10;			_loadbar.width			= WIDTH - 20;			_loadbar.y				= _downloadUpdate.y + _downloadUpdate.height + 10;			computePositions();		}				/**		 * Called during AIR downloading progression.		 */		private function loadProgressHandler(e:ProgressEvent):void {			_loadbar.percent	= e.bytesLoaded / e.bytesTotal;		}		/**		 * Called when download completes		 */		private function downloadCompleteHandler(event:Event):void {			_loadbar.visible		= false;			_downloadUpdate.visible = false;			_label.visible = true;			_label.setText("Téléchargement terminé!<br/><br/><font size=\"12\">Vous pouvez fermer l'application et ouvrir le fichier .air téléchargé!</font>", "downloadLabel");			computePositions();			_label.y	= _downloadUpdate.y;		}				/**		 * Called if download fails		 */		private function downloadErrorHandler(event:Event):void {			_loadbar.visible		= false;			_downloadUpdate.visible = false;			_label.visible = true;			_label.setText("Erreur de téléchargement.", "downloadLabel");			computePositions();			_label.y	= _downloadUpdate.y;		}	}}