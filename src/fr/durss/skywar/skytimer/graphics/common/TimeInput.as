package fr.durss.skywar.skytimer.graphics.common {	import fr.durss.components.events.NumericStepperEvent;	import fr.durss.components.ui.form.numericstepper.NumericStepper;	import fr.durss.skywar.skytimer.data.SkinMetrics;	import com.nurun.components.text.CssTextField;	import flash.display.Sprite;	import flash.events.Event;	import flash.filters.GlowFilter;	/**	 * Displays three numeric stepper to define a time.	 * 	 * @author Fran√ßois	 */	public class TimeInput extends Sprite {
		protected var _stepperH:NumericStepper;		protected var _stepperM:NumericStepper;		protected var _stepperS:NumericStepper;		protected var _labelH:CssTextField;		protected var _labelM:CssTextField;		protected var _labelS:CssTextField;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		public function TimeInput() {			addEventListener(Event.ADDED_TO_STAGE, initialize);		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Gets the hours.		 */		public function get hours():int		{ return _stepperH.value; }				/**		 * Gets the minutes		 */		public function get minutes():int	{ return _stepperM.value; }				/**		 * Gets the seconds		 */		public function get seconds():int	{ return _stepperS.value; }				/**		 * Populate the input with a timestamp UNIX.		 * 		 * @param value timestamp in milliseconds		 */		public function set timestamp(value:Number):void {			var d:Date = new Date(value);			_stepperH.value = d.getHours() - 1 + (d.getDate()-1) * 24;			_stepperM.value = d.getMinutes();			_stepperS.value = d.getSeconds();		}				/**		 * Gets the timestamp value.		 */		public function get timestamp():Number { return new Date(1970, 0, 1, _stepperH.value + 1, _stepperM.value, _stepperS.value).getTime(); }		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Sets the tab indexes of sub components		 */		public function setTabIndexes(hours:int, minutes:int, seconds:int):void {			_stepperH.tabIndex	= hours;			_stepperM.tabIndex	= minutes;			_stepperS.tabIndex	= seconds;		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * initialize the component		 */		protected function initialize(e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, initialize);			_stepperH	= addChild(new NumericStepper(0,99,1,0)) as NumericStepper;			_stepperM	= addChild(new NumericStepper(0,59,1,0)) as NumericStepper;			_stepperS	= addChild(new NumericStepper(0,59,1,0)) as NumericStepper;						_labelH		= addChild(new CssTextField()) as CssTextField;			_labelM		= addChild(new CssTextField()) as CssTextField;			_labelS		= addChild(new CssTextField()) as CssTextField;						_labelH.setText("H", "timeInputLabel");			_labelM.setText("M", "timeInputLabel");			_labelS.setText("S", "timeInputLabel");						_labelH.filters = [new GlowFilter(0,1,1.1,1.1,4,3)];			_labelM.filters = _labelH.filters;			_labelS.filters = _labelH.filters;									_stepperH.addEventListener(Event.ADDED_TO_STAGE,	computePositions);			_stepperM.addEventListener(Event.ADDED_TO_STAGE,	computePositions);			_stepperS.addEventListener(Event.ADDED_TO_STAGE,	computePositions);						_stepperH.addEventListener(Event.CHANGE,	dispatchEvent);			_stepperM.addEventListener(Event.CHANGE,	dispatchEvent);			_stepperS.addEventListener(Event.CHANGE,	dispatchEvent);						_stepperM.addEventListener(NumericStepperEvent.MAX_EXCEEDED,	exceededHandler);			_stepperS.addEventListener(NumericStepperEvent.MAX_EXCEEDED,	exceededHandler);			_stepperM.addEventListener(NumericStepperEvent.MIN_EXCEEDED,	exceededHandler);			_stepperS.addEventListener(NumericStepperEvent.MIN_EXCEEDED,	exceededHandler);						SkinMetrics.getInstance().addEventListener(Event.CHANGE, computePositions);		}		/**		 * Called if a timer maximum or minimum is reached.		 */		private function exceededHandler(e:NumericStepperEvent):void {			var add:int = (e.type == NumericStepperEvent.MAX_EXCEEDED)? 1 : -1;			if(e.target == _stepperM) {				_stepperH.value += add;			}else{				_stepperM.value += add;			}		}		/**		 * Replace the elements		 */		protected function computePositions(e:Event):void {			var px:int		= SkinMetrics.getInstance().timeInputLabelsPos.x;			var py:int		= SkinMetrics.getInstance().timeInputLabelsPos.y;			_stepperH.x		= 0;			_stepperM.x		= Math.round(_stepperH.x + _stepperH.width) + 0;			_stepperM.y		= _stepperH.y;			_stepperS.x		= Math.round(_stepperM.x + _stepperM.width) + 0;			_stepperS.y		= _stepperH.y;			_labelH.x		= Math.round(_stepperH.x + _stepperH.width - px);			_labelM.x		= Math.round(_stepperM.x + _stepperM.width - px);			_labelS.x		= Math.round(_stepperS.x + _stepperS.width - px);			_labelH.y		= Math.round(_stepperH.y + py);			_labelM.y		= Math.round(_stepperM.y + py);			_labelS.y		= Math.round(_stepperS.y + py);			dispatchEvent(new Event(Event.RENDER));		}	}}