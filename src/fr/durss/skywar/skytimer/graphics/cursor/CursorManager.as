package fr.durss.skywar.skytimer.graphics.cursor {	import fr.durss.skywar.skytimer.graphics.WarningGraphic;	import gs.TweenLite;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.filters.BevelFilter;	import flash.ui.Mouse;	import flash.utils.setTimeout;	/**	 * Singleton CursorManager	 * 	 * @author @author Francois	 */	public class CursorManager extends Sprite {				private static var _instance:CursorManager;				public static const DEFAULT:String = "default";		public static const WARNING:String = "warning";				private var _cursor:Sprite;		private var _cursorWarn:WarningGraphic;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>CursorManager</code>.<br>		 */		public function CursorManager(enforcer:SingletonEnforcer) {			enforcer;		// Avoiding unused warning from FDT 3			addEventListener(Event.ADDED_TO_STAGE, initialize);		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Singleton instance getter		 */		public static function getInstance():CursorManager {			if(_instance == null)_instance = new  CursorManager(new SingletonEnforcer());			return _instance;			}		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Changes the cursor.		 * 		 * @param value		cursor to display		 * @param duration	duration of the cursor display in milliseconds (0 = infinity)		 * 		 * @see public static constants.		 */		public function setCursor(value:String, duration:int = 0):void {			if(value == DEFAULT) {				TweenLite.to(_cursor, .5, {autoAlpha:0, onComplete:Mouse.show});			}else{				Mouse.hide();				TweenLite.to(_cursor, .5, {autoAlpha:1});				if(duration > 0){					setTimeout(setCursor, duration, DEFAULT);				}				_cursor.addChild(_cursorWarn);			}		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the class.<br>		 */		private function initialize(e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, initialize);			_cursor			= addChild(new Sprite()) as Sprite;			_cursorWarn		= new WarningGraphic();			_cursor.alpha	= 0;			mouseChildren	= false;			mouseEnabled	= false;			_cursorWarn.filters = [new BevelFilter(1,135,0xffffff,1,0,1,2,2,1.4,3)];			stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);		}				/**		 * Called on mouse move event.		 */		private function mouseMoveHandler(e:MouseEvent):void {			_cursor.x = mouseX;			_cursor.y = mouseY;		}	}}internal class SingletonEnforcer{}