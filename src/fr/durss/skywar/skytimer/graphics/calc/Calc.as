package fr.durss.skywar.skytimer.graphics.calc {	import fr.durss.skywar.skytimer.data.SkinMetrics;	import fr.durss.components.ui.form.input.TextInput;	import fr.durss.components.ui.form.numericstepper.NumericStepper;	import fr.durss.components.ui.tooltip.SimpleToolTip;	import fr.durss.components.ui.tooltip.ToolTipAlign;	import fr.durss.skywar.skytimer.components.STCheckbox;	import fr.durss.skywar.skytimer.components.SubmitButton;	import fr.durss.skywar.skytimer.data.SharedObjectManager;	import fr.durss.skywar.skytimer.events.CalcEvent;	import fr.durss.skywar.skytimer.graphics.AbstractView;	import fr.durss.skywar.skytimer.graphics.common.TimeInput;	import com.nurun.components.text.CssTextField;	import flash.events.Event;	import flash.events.FocusEvent;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.ui.Keyboard;	/**	 * Displays the calculator template	 * 	 * @author François	 */	public class Calc extends AbstractView {
		//Vars declaration		private var _labelTitle:CssTextField;		private var _timeInput1:TimeInput;		private var _timeInput2:TimeInput;		private var _inputOperator:TextInput;		private var _result:TextInput;		private var _submitBt:SubmitButton;		private var _createTimer:SubmitButton;		private var _inputMultiplyDivide:NumericStepper;		private var _autofill:STCheckbox;		private var _toolTip:SimpleToolTip;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		public function Calc() { addEventListener(Event.ADDED_TO_STAGE, initialize); }						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Called when template's visibility changes		 */		override public function set visible(value:Boolean):void {			super.visible = value;			if(value) {				_timeInput1.setTabIndexes(0, 1, 2);				_inputOperator.tabIndex = 3;				_timeInput2.setTabIndexes(4, 5, 6);			}else{				_timeInput1.setTabIndexes(-1, -1, -1);				_inputOperator.tabIndex = -1;				_timeInput2.setTabIndexes(-1, -1, -1);				_inputMultiplyDivide.tabIndex = -1;			}		}				/**		 * Gets the timer's timestamp to create.		 */		public function get timerDuration():uint{			var match:Array = _result.textfield.text.match(new RegExp("[0-9]{1,}", "gi"));			return new Date(1970, 0, 1, parseInt(match[0]) + 1, parseInt(match[1]), parseInt(match[2]), 0).getTime();		}				/* ****** *		 * PUBLIC *		 * ****** */						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * initialize the template.		 */		private function initialize(e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, initialize);						_labelTitle				= addChild(new CssTextField()) as CssTextField;			_timeInput1				= addChild(new TimeInput()) as TimeInput;			_timeInput2				= addChild(new TimeInput()) as TimeInput;			_inputOperator			= addChild(new TextInput()) as TextInput;			_result					= addChild(new TextInput()) as TextInput;			_autofill				= addChild(new STCheckbox()) as STCheckbox;			_inputMultiplyDivide	= addChild(new NumericStepper(0,999,1,1)) as NumericStepper;			_submitBt				= addChild(new SubmitButton("Calculer")) as SubmitButton;			_createTimer			= addChild(new SubmitButton("Créer un timer")) as SubmitButton;			_toolTip				= addChild(new SimpleToolTip()) as SimpleToolTip;						_createTimer.height		= 23;			_createTimer.enabled	= false;			_labelTitle.width		= WIDTH - 10;			_labelTitle.wordWrap	= true;			_autofill.selected		= SharedObjectManager.getInstance().autoFillCalc;			_inputOperator.textfield.restrict	= "\\-+\\*/";			_inputOperator.textfield.maxChars	= 1;			_inputOperator.textfield.text		= "+";			_inputMultiplyDivide.visible		= false;			_labelTitle.setText("Définissez un opérateur à appliquer entre deux temps (+ et -), ou entre un temps et une valeur (/ et *).", "windowLabel");						_result.addEventListener(Event.CHANGE,					changeResultHandler);			_inputOperator.addEventListener(Event.CHANGE,			changeOperatorHandler);			_inputOperator.addEventListener(FocusEvent.FOCUS_IN,	focusInHandler);			_inputOperator.addEventListener(FocusEvent.FOCUS_OUT,	focusOutHandler);			_timeInput1.addEventListener(Event.RENDER,				computePositions);			_timeInput2.addEventListener(Event.RENDER,				computePositions);			_submitBt.addEventListener(MouseEvent.CLICK,			submitHandler);			_createTimer.addEventListener(MouseEvent.CLICK,			createTimerHandler);			_autofill.addEventListener(MouseEvent.ROLL_OVER,		mouseOverAutoFillHandler);			_autofill.addEventListener(MouseEvent.ROLL_OUT,			mouseOutAutoFillHandler);			_autofill.addEventListener(MouseEvent.CLICK,			changeAutoFillHandler);			stage.addEventListener(KeyboardEvent.KEY_UP,			keyUpHandler);			SkinMetrics.getInstance().addEventListener(Event.CHANGE,changeSkinHandler);						computePositions();		}		/**		 * Called when operator is modified		 */		private function changeOperatorHandler(e:Event):void {			var txt:String = _inputOperator.textfield.text;			_inputMultiplyDivide.visible	= txt == "*" || txt == "/";			_timeInput2.visible				= !_inputMultiplyDivide.visible;			if(_timeInput2.visible) {				_inputMultiplyDivide.tabIndex = -1;				_timeInput2.setTabIndexes(4, 5, 6);			}else{				_inputMultiplyDivide.tabIndex = 4;				_timeInput2.setTabIndexes(-1, -1, -1);			}		}				/**		 * Called when the skin is modified.		 */		private function changeSkinHandler(e:Event):void {			_submitBt.changeSkin();			_createTimer.changeSkin();			_autofill.changeSkin();		}		/**		 * Called when create timer button is clicked		 */		private function createTimerHandler(e:MouseEvent):void {			dispatchEvent(new CalcEvent(CalcEvent.CREATE_TIMER));		}		/**		 * Called when result input's content changes.		 */		private function changeResultHandler(event:Event = null):void {			_createTimer.enabled = _result.textfield.text.search(new RegExp("^[0-9]{1,4}h( )*[0-9]{1,2}m( )*[0-9]{1,2}s( )*$", "gi")) == 0;		}				/**		 * Called when a key is released		 */		private function keyUpHandler(e:KeyboardEvent):void {			if(e.keyCode == Keyboard.ENTER && visible) {				submitHandler();			}		}				/**		 * Called when auto fill check box is rolled over		 */		private function mouseOverAutoFillHandler(event:MouseEvent):void {			_toolTip.width = 180;			_toolTip.open("Remplir automatiquement le premier champ de temps avec le résultat lors de la validation.", "toolTipContent", ToolTipAlign.TOP_LEFT);		}		/**		 * Called when auto fill check box is rolled out.		 */		private function mouseOutAutoFillHandler(event:MouseEvent):void { _toolTip.close(); }				/**		 * Called when auto fill check box selected state changes.		 */		private function changeAutoFillHandler(e:Event):void { SharedObjectManager.getInstance().autoFillCalc = _autofill.selected; }		/**		 * Called on submit button click		 */		private function submitHandler(e:MouseEvent = null):void {			var d:Date, h:int, m:int, s:int, op:String;			op = _inputOperator.textfield.text;			if(op == "+" || op == "") {				_inputOperator.textfield.text = "+";				h = _timeInput1.hours + _timeInput2.hours;				m = _timeInput1.minutes + _timeInput2.minutes;				s = _timeInput1.seconds + _timeInput2.seconds;				d = new Date(1970, 0, 1, h + 1, m, s, 0);			}else if(op == "-") {				h = _timeInput1.hours - _timeInput2.hours;				m = _timeInput1.minutes - _timeInput2.minutes;				s = _timeInput1.seconds - _timeInput2.seconds;				d = new Date(1970, 0, 1, h + 1, m, s, 0);			}else if(op == "*") {				d = new Date(_timeInput1.timestamp * _inputMultiplyDivide.value);			}else if(op == "/") {				d = new Date(_timeInput1.timestamp / _inputMultiplyDivide.value);			}			if(_autofill.selected) {				_timeInput1.timestamp = d.getTime();			}			_result.textfield.text = (d.getHours() + ((d.getDate()-1) * 24) - 1)+"h "+d.getMinutes()+"m "+d.getSeconds()+"s";			changeResultHandler();		}		/**		 * Called when operator input gets focus		 */		private function focusInHandler(e:FocusEvent):void { _inputOperator.textfield.setSelection(0,10); }		/**		 * Called when operator input looses focus		 */		private function focusOutHandler(e:FocusEvent):void {			if(_inputOperator.textfield.text.length == 0){				_inputOperator.textfield.text = "+";			}		}		/**		 * Replace the elements		 */		private function computePositions(e:Event = null):void {			_labelTitle.x			= 5;			_labelTitle.y			= 5;			_timeInput1.x			= Math.round((WIDTH - _timeInput1.width) * .5);			_timeInput1.y			= Math.round(_labelTitle.y + _labelTitle.height + 10);			_inputOperator.x		= Math.round((WIDTH - _inputOperator.width) * .5);			_inputOperator.y		= Math.round(_timeInput1.y + _timeInput1.height + 10);			_timeInput2.x			= Math.round((WIDTH - _timeInput2.width) * .5);			_timeInput2.y			= Math.round(_inputOperator.y + _inputOperator.height + 10);			_inputMultiplyDivide.x	= Math.round((WIDTH - _inputMultiplyDivide.width) * .5);			_inputMultiplyDivide.y	= _timeInput2.y;			_result.width			= 150;			_submitBt.x				= Math.round((WIDTH - _submitBt.width) * .5);			_submitBt.y				= Math.round(_timeInput2.y + _timeInput2.height + 10);			_autofill.x				= Math.round(_submitBt.x + _submitBt.width + 10);			_autofill.y				= _submitBt.y + Math.round((_submitBt.height - _autofill.height) * .5);			_result.x				= Math.round((WIDTH - _result.width) * .5);			_result.y				= Math.round(_submitBt.y + _submitBt.height + 10);			_createTimer.x			= Math.round((WIDTH - _createTimer.width) * .5);			_createTimer.y			= Math.round(_result.y + _result.height + 10);		}	}}