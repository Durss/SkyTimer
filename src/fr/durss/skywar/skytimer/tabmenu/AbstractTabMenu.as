package fr.durss.skywar.skytimer.tabmenu {	import com.nurun.components.vo.Margin;	import com.nurun.components.button.IconAlign;	import fr.durss.skywar.skytimer.data.SkinMetrics;	import fr.durss.skywar.skytimer.graphics.IconCalc;	import fr.durss.skywar.skytimer.graphics.IconCalcSelected;	import fr.durss.skywar.skytimer.graphics.IconOptions;	import fr.durss.skywar.skytimer.graphics.IconOptionsSelected;	import fr.durss.skywar.skytimer.graphics.IconTimer;	import fr.durss.skywar.skytimer.graphics.IconTimerSelected;	import fr.durss.skywar.skytimer.graphics.IconWeb;	import fr.durss.skywar.skytimer.graphics.IconWebSelected;	import com.nurun.components.form.FormComponentGroup;	import com.nurun.components.form.ToggleButton;	import com.nurun.utils.KeyShortCutManager;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.ColorTransform;	import flash.utils.Dictionary;	/**	 * Abstract class for tab menu.<p>	 * <p>	 * Provides an <code>addTab</code> method.	 * 	 * @author Fran√ßois	 */	public class AbstractTabMenu extends Sprite {
		protected var _menus:Array;		protected var _selectedIndex:int;		//Used to unselect all the tabs when we are on the session manager		protected var _unselector:ToggleButton;		protected var _group:FormComponentGroup;		protected var _indexes:Dictionary;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		public function AbstractTabMenu() {			addEventListener(Event.ADDED_TO_STAGE, initialize);		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Gets the currently selected menu index.		 */		public function get selectedIndex():int { return _selectedIndex; }				/**		 * Selects a menu by its index.<br>		 * <br>		 * If the given value is -1, then all the tab menus will be unselected.		 */		public function set selectedIndex(value:int):void {			if(_selectedIndex == value && value > -1) return;			if(value == -1) {				_unselector.selected = true;			}else{				value = (value < 0)? 0 : value;				value = (value > _menus.length - 1) ? _menus.length - 1 : value;				ToggleButton(_menus[value]).selected = true;			}			_selectedIndex = value;			dispatchEvent(new Event(Event.SELECT));		}						/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Opens a template by its id		 */		public function openIndex(index:int):void{			ToggleButton(_menus[index]).selected = true;			_selectedIndex	= index;			dispatchEvent(new Event(Event.SELECT));		}						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initialize the menu		 */		protected function initialize(e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, initialize);						_group		= new FormComponentGroup();			_indexes	= new Dictionary();						_menus	= [];			_selectedIndex = -1;			addTab(new ToggleButton("", "", "", SkinMetrics.getInstance().skinTabMenu, SkinMetrics.getInstance().skinTabMenuSelected, new IconTimer(), new IconTimerSelected()));			addTab(new ToggleButton("", "", "", SkinMetrics.getInstance().skinTabMenu, SkinMetrics.getInstance().skinTabMenuSelected, new IconCalc(), new IconCalcSelected()));			addTab(new ToggleButton("", "", "", SkinMetrics.getInstance().skinTabMenu, SkinMetrics.getInstance().skinTabMenuSelected, new IconOptions(), new IconOptionsSelected()));			addTab(new ToggleButton("", "", "", SkinMetrics.getInstance().skinTabMenu, SkinMetrics.getInstance().skinTabMenuSelected, new IconWeb(), new IconWebSelected()));						//Just used to be able to unselect all the tabs by selecting this fake tab.			_unselector = new ToggleButton("", "");			_group.add(_unselector);						selectedIndex = 0;			KeyShortCutManager.getInstance().start(stage);//			KeyShortCutManager.getInstance().reportShortCuts = true;			SkinMetrics.getInstance().addEventListener(Event.CHANGE, changeSkinHandler);			KeyShortCutManager.getInstance().addEventListener("onShortCut_17_9", nextTabHandler); //Ctrl+Tab			KeyShortCutManager.getInstance().addEventListener("onShortCut_17_16_9", prevTabHandler); //Ctrl+Shift+Tab						changeSkinHandler();		}		/**		 * Called when the skin is modified.<p>		 */		private function changeSkinHandler(e:Event = null):void {			var i:int, ct:ColorTransform, len:int, px:int, item:ToggleButton;			len	= _menus.length;			px	= SkinMetrics.getInstance().tabMenuOrigin.x;			ct	= new ColorTransform();			ct.color = SkinMetrics.getInstance().tabMenuIconColor;			for (i  = 0; i < len; i++) {				item			= _menus[i] as ToggleButton;				item.width		= SkinMetrics.getInstance().tabMenuSizes.width;				item.height		= SkinMetrics.getInstance().tabMenuSizes.height;				item.y			= SkinMetrics.getInstance().tabMenuOrigin.y;				item.x			= px;				px				+= item.width + SkinMetrics.getInstance().tabMenuSpace;				item.selectedBackground= SkinMetrics.getInstance().skinTabMenuSelected;				item.selectedIcon.transform.colorTransform = ct;				item.defaultIcon.transform.colorTransform = ct;			}		}		/**		 * Adds a tab menu.		 */		protected function addTab(item:ToggleButton):void {			var px:int, exItem:ToggleButton;			px = SkinMetrics.getInstance().tabMenuOrigin.x;			if(_menus.length > 0) {				exItem	= ToggleButton(_menus[_menus.length - 1]);				px		= Math.floor(exItem.x + exItem.width + SkinMetrics.getInstance().tabMenuSpace);			}			item.x			= px;			item.y			= SkinMetrics.getInstance().tabMenuOrigin.y;			item.width		= SkinMetrics.getInstance().tabMenuSizes.width;			item.height		= SkinMetrics.getInstance().tabMenuSizes.height;			item.iconAlign	= IconAlign.CENTER;			item.contentMargin = new Margin(0, 1, 0, 0);			_indexes[item]	= _menus.length;			item.addEventListener(MouseEvent.CLICK, clickItemHandler);			addChild(item);			_group.add(item);			_menus.push(item);		}		/**		 * Called when an item's state changes		 */		private function clickItemHandler(e:MouseEvent):void {			_selectedIndex = _indexes[_group.selectedItem];			dispatchEvent(new Event(Event.SELECT));		}				/**		 * Called on Ctrl+tab shortcut.		 */		private function nextTabHandler(e:Event):void {			_selectedIndex = (_selectedIndex + 1) % _menus.length;			ToggleButton(_menus[_selectedIndex]).selected = true;			dispatchEvent(new Event(Event.SELECT));		}		/**		 * Called on Ctrl+Shift+tab shortcut.		 */		private function prevTabHandler(e:Event):void {			if(--_selectedIndex < 0) {				_selectedIndex = _menus.length - 1;			}			ToggleButton(_menus[_selectedIndex]).selected = true;			dispatchEvent(new Event(Event.SELECT));		}	}}