package fr.durss.skywar.skytimer {	import fr.durss.components.ui.tooltip.SimpleToolTip;	import fr.durss.components.ui.tooltip.ToolTipAlign;	import fr.durss.skywar.skytimer.data.AppVersion;	import fr.durss.skywar.skytimer.data.SharedObjectManager;	import fr.durss.skywar.skytimer.data.SkinMetrics;	import fr.durss.skywar.skytimer.events.CalcEvent;	import fr.durss.skywar.skytimer.events.TimerViewEvent;	import fr.durss.skywar.skytimer.events.UpdateEvent;	import fr.durss.skywar.skytimer.graphics.Background;	import fr.durss.skywar.skytimer.graphics.calc.Calc;	import fr.durss.skywar.skytimer.graphics.cursor.CursorManager;	import fr.durss.skywar.skytimer.graphics.options.Options;	import fr.durss.skywar.skytimer.graphics.sessionselector.SessionView;	import fr.durss.skywar.skytimer.graphics.timers.Timers;	import fr.durss.skywar.skytimer.graphics.web.Web;	import fr.durss.skywar.skytimer.tabmenu.ITabMenu;	import com.nurun.components.button.BaseButton;	import com.nurun.components.text.CssTextField;	import com.nurun.utils.text.CssManager;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.filters.GlowFilter;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	/**	 * Displays the timers template.	 * 	 * @author François	 */	public class AbstractApp extends MovieClip {		protected var _tabMenus:ITabMenu;		protected var _timers:Timers;		protected var _background:Background;		protected var _options:Options;		protected var _calc:Calc;		protected var _web:Web;		protected var _sessionSelector:SessionView;		protected var _version:CssTextField;				//TODO move those 2 vars and there creations/handlers in a dedicated class to have less things on this class		protected var _copyright:BaseButton;		protected var _toolTipCopyright:SimpleToolTip;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		public function AbstractApp() {			var loader:Loader = new Loader();			loader.load(new URLRequest("fonts/Fonts.swf"));			loader.contentLoaderInfo.addEventListener(Event.COMPLETE,			initialize);			loader.contentLoaderInfo.addEventListener(ErrorEvent.ERROR,			initErrorHandler);			loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,	initErrorHandler);		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/* ****** *		 * PUBLIC *		 * ****** */						/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Called if font file isn't found.		 */		private function initErrorHandler(e:IOErrorEvent):void {			var tf:TextField = addChild(new TextField()) as TextField;			tf.autoSize = TextFieldAutoSize.LEFT;			tf.textColor = 0xcc0000;			tf.text = "ERROR : Font loading failed...";			tf.x = Math.round((stage.stageWidth - tf.width) * .5); 			tf.y = Math.round((stage.stageHeight - tf.height) * .5); 		}		/**		 * To override!		 */		protected function initialize(e:Event):void {			setCss();						//Can't do this on the SharedObjectManager's initialize method due			//stack overflow problems with MainTimer singleton...			//Read createDefaultSession method's comments for more details.			SharedObjectManager.getInstance().createDefaultSession();						stage.scaleMode	= StageScaleMode.NO_SCALE;			stage.align		= StageAlign.TOP_LEFT;			stage.showDefaultContextMenu = false;						_background	= addChild(new Background()) as Background;			//TODO optimize, it takes about 300ms to initialize...			_timers		= addChild(new Timers()) as Timers;			_calc		= addChild(new Calc()) as Calc;			//TODO optimize, it takes about 100ms to initialize...			_options	= addChild(new Options()) as Options;			_web		= addChild(new Web()) as Web;			_copyright	= addChild(new BaseButton("©", "link")) as BaseButton;			_sessionSelector = addChild(new SessionView()) as SessionView;			_toolTipCopyright = addChild(new SimpleToolTip()) as SimpleToolTip;			_version	= addChild(new CssTextField()) as CssTextField;						_version.setText("v "+AppVersion.VERSION, "version");			_version.alpha	= .4;						_calc.visible	= false;			_web.visible	= false;			_options.visible= false;			_sessionSelector.visible= false;			_copyright.filters	= [new GlowFilter(0,1,2,2,4,3)];						changeSkinHandler();						_timers.addEventListener(TimerViewEvent.TIMER_COMPLETE,		timerCompleteHandler);			_sessionSelector.addEventListener(Event.SELECT,				selectTabHandler);			_calc.addEventListener(CalcEvent.CREATE_TIMER,				createTimerFromCalcHandler);			_web.addEventListener(UpdateEvent.UPDATE_AVAILABLE,			activateTabHandler);			_copyright.addEventListener(MouseEvent.CLICK,				clickCopyrightHandler);			_copyright.addEventListener(MouseEvent.ROLL_OVER,			overCopyrightHandler);			_copyright.addEventListener(MouseEvent.ROLL_OUT,			outCopyrightHandler);			SkinMetrics.getInstance().addEventListener(Event.CHANGE,	changeSkinHandler, false, 1);		}		/**		 * Called when a template asks to be opened.		 */		private function activateTabHandler(e:Event):void {			if(e.target == _web) {				_tabMenus.selectedIndex = 3;			}		}		/**		 * Resize / replace the elements		 */		protected function computePositions():void {			_timers.x	= SkinMetrics.getInstance().offsetXView;			_timers.y	= 83;			_options.x	= _timers.x;			_options.y	= _timers.y;			_calc.x		= _timers.x;			_calc.y		= _timers.y;			_web.x		= _timers.x;			_web.y		= _timers.y;			_sessionSelector.x	= _timers.x;			_sessionSelector.y	= _timers.y;			_version.x	= SkinMetrics.getInstance().versionPosition.x;			_version.y	= SkinMetrics.getInstance().versionPosition.y;			_copyright.x= Math.round(SkinMetrics.getInstance().copyrightPosition.x - _copyright.width * .5 );			_copyright.y= Math.round(SkinMetrics.getInstance().copyrightPosition.y - _copyright.height * .5 );						addChild(CursorManager.getInstance());		}				/**		 * Called when a timer completes		 */		protected function timerCompleteHandler(e:TimerViewEvent):void {			_tabMenus.selectedIndex = 0;		}		/**		 * Called when create button is clicked on calc		 */		private function createTimerFromCalcHandler(eveent:Event):void {			_tabMenus.openIndex(0);			_timers.createTimer(_calc.timerDuration);		}				/**		 * Called when the skin is modified.<p>		 */		protected function changeSkinHandler(e:Event = null):void {			_background.gotoAndStop(SkinMetrics.getInstance().frame);			setCss();			computePositions();		}		/**		 * Called when a tab menu is clicked.<br>		 */		protected function selectTabHandler(e:Event):void {			_calc.visible		= false;			_timers.visible		= false;			_options.visible	= false;			_web.visible		= false;			_sessionSelector.visible = false;			if(e.target == _tabMenus) {				switch(_tabMenus.selectedIndex)  {					case -1:						_sessionSelector.visible	= true;						break;					case 0:						_timers.visible	= true;						break;					case 1:						_calc.visible	= true;						break;					case 2:						_options.visible= true;						break;					case 3:						_web.visible	= true;						break;				}			} else {				_tabMenus.selectedIndex = -1;			}		}		/**		 * Register the CSS styles.		 */		protected function setCss():void {			CssManager.getInstance().styleSheet.clear();			var css:String = "";			css	+= ".log { font-family:Arial; color:#000000; font-size:11; flash-background:true; flash-selectable:true; }";			css	+= ".timerName { font-family:Arial; color:#ffffff; font-size:11; leading:.3; font-weight:bold; }";			css	+= ".timerTime { font-family:Arial; color:#ffffff; font-size:10; leading:1; font-weight:bold; }";			css	+= ".timerTimeComplete { font-family:Arial; color:#cc0000; font-size:10; leading:1; font-weight:bold; }";			css	+= ".inputStepper { font-family:Arial; color:#ffffff; font-size:12; text-align:center; font-weight:bold; }";			css	+= ".inputName { font-family:Arial; color:#ffffff; font-size:12; text-align:left; font-weight:bold; }";			css	+= ".inputNormal { font-family:Arial; color:#ffffff; font-size:12; font-weight:bold; }";			css	+= ".timeInputLabel { font-family:Verdana; color:#ffffff; font-size:8; }";						css	+= ".soundPercent { font-family:Verdana; color:#ffffff; font-size:8; }";			css	+= ".version { font-family:Arial; color:#ffffff; font-size:8; font-weight:bold; }";						css += ".link { font-family:Arial; color:#EEAA55; font-weight:bold; }";						if(SkinMetrics.getInstance().currentSkin == SkinMetrics.SKIN_SKATCH) {				css	+= ".toolTipContent { font-family:Verdana; color:#494136; font-size:10; flash-bitmap:true; }";							css	+= ".submitButton { font-family:Arial; color:#000000; text-align:center; font-size:11; font-weight:bold; }";				css	+= ".submitButtonSelected { font-family:Arial; color:#440000; text-align:center; font-size:11; font-weight:bold; }";								css	+= ".howToUse { font-family:Arial; color:#A4A99A; font-size:16; }";								css	+= ".updates { font-family:Arial; color:#A4A99A; font-size:10; flash-bitmap:true; }";				css	+= ".updateNumber { font-family:Arial; color:#ffffff; font-size:12; font-weight:bold; }";				css	+= ".downloadLabel { font-family:Arial; color:#A4A99A; text-align:center; font-size:16; }";								css	+= ".comboboxPrompt { font-family:Verdana; color:#ffffff; font-size:10; font-weight:bold; }";				css	+= ".comboboxItem { font-family:Verdana; color:#ffffff; font-size:10; font-weight:bold; }";								css	+= ".sessionLabel { font-family:Arial; color:#A4A99A; font-size:12; font-weight:bold; flash-backgroundcolor:#141512; }";				css	+= ".windowLabel { font-family:Arial; color:#A4A99A; font-size:12; font-weight:bold; }";				css	+= ".windowTabLabel { font-family:Arial; color:#cccccc; font-size:11; font-weight:bold; }";//				css	+= ".windowTabLabel_over { font-family:Arial; color:#cc0000; font-size:11; font-weight:bold; }";				css	+= ".windowTabLabelSelected { font-family:Arial; color:#494136; font-size:11; font-weight:bold; }";								css	+= ".openSessionMenuLabel { font-family:Arial; color:#ffffff; text-align:center; font-size:13; font-weight:bold; }";				css	+= ".openSessionMenuLabel_over { font-family:Arial; color:#ddddff; text-align:center; font-size:13; font-weight:bold; }";				css	+= ".openSessionMenuLabel_down { font-family:Arial; color:#cccccc; text-align:center; font-size:13; font-weight:bold; }";								css	+= ".checkBoxLabel { font-family:Arial; color:#ffffff; font-size:12; }";							}else{				css	+= ".toolTipContent { font-family:Verdana; color:#8D5050; font-size:10; flash-bitmap:true; }";								css	+= ".submitButton { font-family:Arial; color:#2E1C12; text-align:center; font-size:11; font-weight:bold; }";				css	+= ".submitButtonSelected { font-family:Arial; color:#8E1C12; text-align:center; font-size:11; font-weight:bold; }";								css	+= ".howToUse { font-family:Arial; color:#924A43; font-size:16; }";								css	+= ".updates { font-family:Arial; color:#924A43; font-size:10; flash-bitmap:true; }";				css	+= ".updateNumber { font-family:Arial; color:#ffffff; font-size:12; font-weight:bold; }";				css	+= ".downloadLabel { font-family:Arial; color:#924A43; text-align:center; font-size:16; }";								css	+= ".comboboxPrompt { font-family:Verdana; color:#2E1C12; font-size:10; font-weight:bold; }";				css	+= ".comboboxItem { font-family:Verdana; color:#ffffff; font-size:10; font-weight:bold; }";								css	+= ".sessionLabel { font-family:Arial; color:#A4A99A; font-size:12; font-weight:bold; flash-backgroundcolor:#100804; }";				css	+= ".windowLabel { font-family:Arial; color:#924A43; font-size:12; font-weight:bold; }";				css	+= ".windowTabLabel { font-family:Arial; color:#B5887D; font-size:11; font-weight:bold; }";				css	+= ".windowTabLabelSelected { font-family:Arial; color:#924A43; font-size:11; font-weight:bold; }";								css	+= ".openSessionMenuLabel { font-family:Arial; color:#ffffff; text-align:center; font-size:13; font-weight:bold; }";				css	+= ".openSessionMenuLabel_over { font-family:Arial; color:#E9DBDA; text-align:center; font-size:13; font-weight:bold; }";				css	+= ".openSessionMenuLabel_down { font-family:Arial; color:#CEB3B0; text-align:center; font-size:13; font-weight:bold; }";								css	+= ".checkBoxLabel { font-family:Arial; color:#CEB3B0; font-size:12; }";			}						CssManager.getInstance().setCss(css);		}										//__________________________________________________________ COPYRIGHT				/**		 * Called when copyright is clicked.<br> 		 */		private function clickCopyrightHandler(e:MouseEvent):void {			navigateToURL(new URLRequest("http://www.motion-twin.com"), "_blank");		}		/**		 * Called when copyright is rolled over.<br> 		 */		private function overCopyrightHandler(e:MouseEvent):void {			_toolTipCopyright.width = 192;			_toolTipCopyright.open("Toutes les illustrations de cette application sont propriétés de Motion-Twin.<br/><br/><i>(cliquez pour accéder au site)</i>", "toolTipContent", ToolTipAlign.TOP_LEFT);		}		/**		 * Called when copyright is rolled out.<br> 		 */		private function outCopyrightHandler(e:MouseEvent):void {			_toolTipCopyright.close();		}	}}