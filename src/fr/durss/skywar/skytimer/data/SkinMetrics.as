package fr.durss.skywar.skytimer.data {	import fr.durss.skywar.skytimer.graphics.AddTimerBtD;	import fr.durss.skywar.skytimer.graphics.AddTimerBtS;	import fr.durss.skywar.skytimer.graphics.BackInputGraphicsD;	import fr.durss.skywar.skytimer.graphics.BackInputGraphicsS;	import fr.durss.skywar.skytimer.graphics.CableInputGraphicD;	import fr.durss.skywar.skytimer.graphics.CableInputGraphicS;	import fr.durss.skywar.skytimer.graphics.CheckBoxGraphicsD;	import fr.durss.skywar.skytimer.graphics.CheckBoxGraphicsS;	import fr.durss.skywar.skytimer.graphics.CheckBoxSelectedGraphicsD;	import fr.durss.skywar.skytimer.graphics.CheckBoxSelectedGraphicsS;	import fr.durss.skywar.skytimer.graphics.CloseAppGraphicsD;	import fr.durss.skywar.skytimer.graphics.CloseAppGraphicsS;	import fr.durss.skywar.skytimer.graphics.CloseButtonGraphicsD;	import fr.durss.skywar.skytimer.graphics.CloseButtonGraphicsS;	import fr.durss.skywar.skytimer.graphics.CycleArrowD;	import fr.durss.skywar.skytimer.graphics.CycleArrowS;	import fr.durss.skywar.skytimer.graphics.DefaultTabButtonGraphics;	import fr.durss.skywar.skytimer.graphics.DownBtGraphicsD;	import fr.durss.skywar.skytimer.graphics.DownBtGraphicsS;	import fr.durss.skywar.skytimer.graphics.LoadBarBackgroundD;	import fr.durss.skywar.skytimer.graphics.LoadBarBackgroundS;	import fr.durss.skywar.skytimer.graphics.LoadBarFillD;	import fr.durss.skywar.skytimer.graphics.LoadBarFillS;	import fr.durss.skywar.skytimer.graphics.MaskTimerBarD;	import fr.durss.skywar.skytimer.graphics.MaskTimerBarS;	import fr.durss.skywar.skytimer.graphics.MinimizeAppGraphicsD;	import fr.durss.skywar.skytimer.graphics.MinimizeAppGraphicsS;	import fr.durss.skywar.skytimer.graphics.OrderBtGraphicsD;	import fr.durss.skywar.skytimer.graphics.OrderBtGraphicsS;	import fr.durss.skywar.skytimer.graphics.SkinScrollThumbD;	import fr.durss.skywar.skytimer.graphics.SkinScrollThumbS;	import fr.durss.skywar.skytimer.graphics.SkinScrollTrackD;	import fr.durss.skywar.skytimer.graphics.SkinScrollTrackS;	import fr.durss.skywar.skytimer.graphics.SubmitButtonGraphicsD;	import fr.durss.skywar.skytimer.graphics.SubmitButtonGraphicsS;	import fr.durss.skywar.skytimer.graphics.SubmitButtonSelectedGraphicsD;	import fr.durss.skywar.skytimer.graphics.SubmitButtonSelectedGraphicsS;	import fr.durss.skywar.skytimer.graphics.TabButtonGraphicsD;	import fr.durss.skywar.skytimer.graphics.TabButtonGraphicsS;	import fr.durss.skywar.skytimer.graphics.TabWindowGraphicsD;	import fr.durss.skywar.skytimer.graphics.TabWindowGraphicsS;	import fr.durss.skywar.skytimer.graphics.TabWindowSelectedGraphicsD;	import fr.durss.skywar.skytimer.graphics.TabWindowSelectedGraphicsS;	import fr.durss.skywar.skytimer.graphics.UpBtGraphicsD;	import fr.durss.skywar.skytimer.graphics.UpBtGraphicsS;	import fr.durss.skywar.skytimer.vo.Sizes;	import com.nurun.components.scroll.scroller.scrollbar.ScrollbarClassicSkin;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.geom.Point;	import flash.geom.Rectangle;	/**	 * Contains the skins metrics.<br>	 * <br>	 * Fires an <code>Event.CHANGE</code> event when the skin is modified.<br>	 * All the view should listen to this event and update themselves consequently. 	 * 	 * @author  Fran√ßois	 */	public class SkinMetrics extends EventDispatcher {				public static var SKIN_SKATCH:String	= "skatch";
		public static var SKIN_DANGREN:String	= "dangren";		private var _skin:String;				private static var _instance:SkinMetrics;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>SkinMetrics</code>		 */		public function SkinMetrics(enforcer:SingletonEnforcer){			enforcer;		// Avoiding unused warning from FDT 3			_skin = SharedObjectManager.getInstance().skin;		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Singleton instance getter		 */		public static function getInstance(): SkinMetrics{			if(_instance == null)_instance = new  SkinMetrics(new SingletonEnforcer());			return _instance;			}				/**		 * Gets the position offset for view.		 */		public function get offsetXView():int						{ return (_skin == SKIN_DANGREN) ? 14 : 11; }				/**		 * Gets the currently applied skin.		 */		public function get currentSkin():String					{ return (_skin == null)? SKIN_SKATCH : _skin; }		/**		 * Gets the scrollbars skin.		 */		public function get skinScroll():ScrollbarClassicSkin		{			var upBt:MovieClip			= null;//(_skin == SKIN_DANGREN)? new SkinScrollUpD() : new SkinScrollUpS();			var downBt:MovieClip		= null;//(_skin == SKIN_DANGREN)? new SkinScrollDownD() : new SkinScrollDownS();			var trackBt:MovieClip		= (_skin == SKIN_DANGREN)? new SkinScrollTrackD() : new SkinScrollTrackS();			var scrollerBt:MovieClip	= (_skin == SKIN_DANGREN)? new SkinScrollThumbD() : new SkinScrollThumbS();			return new ScrollbarClassicSkin(upBt, downBt, scrollerBt, null, trackBt);		}		/**		 * Gets the skin of the add timer button.		 */		public function get skinAddTimerBt():MovieClip				{ return (_skin == SKIN_DANGREN)? new AddTimerBtD() : new AddTimerBtS(); }				/**		 * Gets the window's tab button skin.		 */		public function get skinTabWindow():MovieClip				{ return (_skin == SKIN_DANGREN) ? new TabWindowGraphicsD() : new TabWindowGraphicsS(); }				/**		 * Gets the window's tab button selected skin.		 */		public function get skinTabWindowSelected():MovieClip		{ return (_skin == SKIN_DANGREN) ? new TabWindowSelectedGraphicsD() : new TabWindowSelectedGraphicsS(); }				/**		 * Gets the submit button's skin.		 */		public function get skinSubmitButton():MovieClip			{ return (_skin == SKIN_DANGREN) ? new SubmitButtonGraphicsD() : new SubmitButtonGraphicsS(); }				/**		 * Gets the submit button's skin.		 */		public function get skinSubmitSelectedButton():MovieClip	{ return (_skin == SKIN_DANGREN) ? new SubmitButtonSelectedGraphicsD() : new SubmitButtonSelectedGraphicsS(); }				/**		 * Gets the close button's skin.		 */		public function get skinCloseButton():MovieClip				{ return (_skin == SKIN_DANGREN) ? new CloseButtonGraphicsD() : new CloseButtonGraphicsS(); }				/**		 * Gets the main menu's buttons skin.		 */		public function get skinTabMenu():MovieClip					{ return new DefaultTabButtonGraphics(); }				/**		 * Gets the main menu's selected buttons skin.		 */		public function get skinTabMenuSelected():MovieClip			{ return (_skin == SKIN_DANGREN) ? new TabButtonGraphicsD() : new TabButtonGraphicsS(); }				/**		 * Gets the checkbox's skin.		 */		public function get skinCheckBox():MovieClip				{ return (_skin == SKIN_DANGREN) ? new CheckBoxGraphicsD() : new CheckBoxGraphicsS(); }				/**		 * Gets the selected checkbox's skin.		 */		public function get skinCheckBoxSelected():MovieClip		{ return (_skin == SKIN_DANGREN) ? new CheckBoxSelectedGraphicsD() : new CheckBoxSelectedGraphicsS(); }				/**		 * Gets the skin of the inputs.		 */		public function get skinBackInput():MovieClip				{ return (_skin == SKIN_DANGREN) ? new BackInputGraphicsD(): new BackInputGraphicsS(); }				/**		 * Gets the skin of the up button.		 */		public function get skinUpBt():MovieClip					{ return (_skin == SKIN_DANGREN) ? new UpBtGraphicsD() : new UpBtGraphicsS(); }				/**		 * Gets the skin of the down button.		 */		public function get skinDownBt():MovieClip					{ return (_skin == SKIN_DANGREN) ? new DownBtGraphicsD() : new DownBtGraphicsS(); }				/**		 * Gets the skin of the close button.		 */		public function get skinCloseAppButton():MovieClip			{ return (_skin == SKIN_DANGREN) ? new CloseAppGraphicsD() : new CloseAppGraphicsS(); }				/**		 * Gets the skin of the minimize button.		 */		public function get skinMinimizeAppButton():MovieClip		{ return (_skin == SKIN_DANGREN) ? new MinimizeAppGraphicsD() : new MinimizeAppGraphicsS(); }				/**		 * Gets the skin of the order button.		 */		public function get skinOrderTimersButton():MovieClip		{ return (_skin == SKIN_DANGREN) ? new OrderBtGraphicsD() : new OrderBtGraphicsS(); }				/**		 * Gets the skin of the timer bar's mask.		 */		public function get skinTimerBarMask():Sprite				{ return (_skin == SKIN_DANGREN) ? new MaskTimerBarD() : new MaskTimerBarS(); }				/**		 * Gets the skin of the plug buttons of the timer items.		 */		public function get skinPlugButton():Sprite					{ return (_skin == SKIN_DANGREN) ? new CableInputGraphicD() : new CableInputGraphicS(); }				/**		 * Gets the skin of the loadbar's background		 */		public function get skinLoadBarBack():Sprite				{ return (_skin == SKIN_DANGREN) ? new LoadBarBackgroundD() : new LoadBarBackgroundS(); }				/**		 * Gets the skin of the loadbar's background		 */		public function get skinLoadBarFill():Sprite				{ return (_skin == SKIN_DANGREN) ? new LoadBarFillD() : new LoadBarFillS(); }				/**		 * Gets the position of the top plug button.		 */		public function get plugButton1Pos():Point					{ return (_skin == SKIN_DANGREN) ? new Point(0,29) : new Point(0,29); }				/**		 * Gets the position of the bottom plug button.		 */		public function get plugButton2Pos():Point					{ return (_skin == SKIN_DANGREN) ? new Point(0,1) : new Point(0,0); }				/**		 * Gets the skin of the cycle sychroniser arrow.		 */		public function get cycleArrow():Sprite						{ return (_skin == SKIN_DANGREN) ? new CycleArrowD() : new CycleArrowS(); }				/**		 * Gets the skin of the cycle synchroniser bar.		 */		public function get cycleBarColor():int						{ return (_skin == SKIN_DANGREN) ? 0xA57D74 : 0x898D6B; }				/**		 * Gets the background color of the feedback window.		 */		public function get feedbackBackgroundColor():int			{ return (_skin == SKIN_DANGREN) ? 0x382922 : 0x3D3E3A; }
		/**		 * Gets the space between two main menu tab items.		 */		public function get tabMenuSpace():int						{ return (_skin == SKIN_DANGREN) ? 0 : 0; }				/**		 * Gets the positioning origin of the tabs menu.		 */		public function get tabMenuOrigin():Point					{ return (_skin == SKIN_DANGREN) ? new Point(11, 45) : new Point(5, 40); }				/**		 * Gets the positioning origin of the tabs menu.		 */		public function get tabMenuSizes():Sizes					{ return (_skin == SKIN_DANGREN) ? new Sizes(57, 33) : new Sizes(57, 38); }				/**		 * Gets the color of the main t'ab menu's icons.		 */		public function get tabMenuIconColor():uint					{ return (_skin == SKIN_DANGREN) ? 0xE0896B : 0x3C3D32; }				/**		 * Gets the frame of the current's skin.		 */		public function get frame():int								{ return (_skin == SKIN_DANGREN) ? 2 : 1; }				/**		 * Gets the position of the cycle inputs labels.		 */		public function get timeInputLabelsPos():Point				{ return (_skin == SKIN_DANGREN) ? new Point(36, 17) : new Point(40, 17); }				/**		 * Gets the position of the version's text.		 */		public function get versionPosition():Point					{ return (_skin == SKIN_DANGREN) ? new Point(13, 30) : new Point(16, 18); }				/**		 * Gets the position of the copyright's button.		 */		public function get copyrightPosition():Point				{ return (_skin == SKIN_DANGREN) ? new Point(231, 447) : new Point(222, 444); }				/**		 * Gets the display rect of the timer bar.		 */		public function get timerBarRect():Rectangle				{ return (_skin == SKIN_DANGREN) ? new Rectangle(27, 25, 143, 20) : new Rectangle(34, 26, 148, 19); }				/**		 * Gets the position of the timer bar's mask.		 */		public function get timerBarMaskPos():Point					{ return (_skin == SKIN_DANGREN) ? new Point(22, 20) : new Point(22, 20); }				/**		 * Gets the position of the sound button.		 */		public function get soundButtonPos():Point					{ return (_skin == SKIN_DANGREN) ? new Point(170, 25) : new Point(182, 26); }				/**		 * Gets the position of the control bar.		 */		public function get controlBarPos():Point					{ return (_skin == SKIN_DANGREN) ? new Point(27, 24) : new Point(34, 24); }				/**		 * Gets the position of the sound button.		 */		public function get closeButtonPos():Point					{ return (_skin == SKIN_DANGREN) ? new Point(191, 5) : new Point(188, 3); }				/**		 * Gets the position of the sound button.		 */		public function get closeButtonSizes():Sizes				{ return (_skin == SKIN_DANGREN) ? new Sizes(14, 15) : new Sizes(18, 18); }				/**		 * Gets the position of the sound button.		 */		public function get numericStepperButtonAddX():int			{ return (_skin == SKIN_DANGREN) ? 2 : 0; }				/**		 * Gets the position of the close application button.		 */		public function get closeAppButtonPos():Point				{ return (_skin == SKIN_DANGREN) ? new Point(220, 17) : new Point(211, 9); }				/**		 * Gets the position of the minimize application button.		 */		public function get minimizeAppButtonPos():Point			{ return (_skin == SKIN_DANGREN) ? new Point(196, 17) : new Point(187, 9); }						/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Loads a new skin.<p>		 */		public function loadSkin(skin:String):void {			if(_skin == skin) return;			_skin = skin;			SharedObjectManager.getInstance().skin = _skin;			dispatchEvent(new Event(Event.CHANGE));		}						/* ******* *		 * PRIVATE *		 * ******* */			}}internal class SingletonEnforcer{}