package fr.durss.components.ui.tooltip {	import fr.durss.skywar.skytimer.data.SkinMetrics;	import fr.durss.skywar.skytimer.graphics.ToolTipBack;	import gs.TweenLite;	import com.nurun.components.text.CssTextField;	import com.nurun.utils.text.TextBounds;	import flash.display.Sprite;	import flash.events.Event;	import flash.filters.DropShadowFilter;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.text.AntiAliasType;	/**	 * DIsplays a simple tooltip with background and text.	 * 	 * @author Fran√ßois	 */	public class SimpleToolTip extends Sprite {
		private var _background:ToolTipBack;		private var _label:CssTextField;		private var _align:String;		private var _widthMax:int;		private var _opened:Boolean;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		public function SimpleToolTip() { addEventListener(Event.ADDED_TO_STAGE, initialize); }						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the width of the tooltip without just scaling it.<p>		 * <p>		 * In truth this value just sets the maximum width of the component.<p>		 * Set the value to 0 to re-activate the autosize.		 */		override public function set width(value:Number):void { _widthMax = value; }		/* ****** *		 * PUBLIC *		 * ****** */		/**		 * Opens the tooltip.<p>		 * 		 * @param content	text content to display.		 * @param css		css style of the content.		 * @param align		align type to the mouse.		 * 		 * @see ToolTipAlign ToolTipAlign		 */		public function open(content:String, css:String, align:String = ""):void {			_align	= align;			_opened	= true;			_label.setText(content, css);			TweenLite.to(this, .3, {autoAlpha:1});		}		/**		 * Closes the tooltip.<br>		 */		public function close():void {			_opened	= false;			TweenLite.to(this, .3, {autoAlpha:0});		}				/**		 * Changes the tooltip's content.<br>		 * 		 * @param content	text content to display.		 * @param css		css style of the content.		 */		public function setContent(text:String, css:String = null):void {			_label.setText(text, (css == null)? _label.style : css);		}								/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initializes the class.		 */		private function initialize(e:Event):void {			removeEventListener(Event.ADDED_TO_STAGE, initialize);						_background	= addChild(new ToolTipBack()) as ToolTipBack;			_label		= addChild(new CssTextField()) as CssTextField;			_label.antiAliasType = AntiAliasType.NORMAL;			alpha		= 0;			visible		= false;			filters		= [new DropShadowFilter(4,45,0,.35,4,4,1,3)];			mouseEnabled= false;			mouseChildren= false;			_background.gotoAndStop(SkinMetrics.getInstance().frame);			addEventListener(Event.ENTER_FRAME, computePositions);			SkinMetrics.getInstance().addEventListener(Event.CHANGE, changeSkinHandler);		}		/**		 * Replace / resize the elements and the global tooltip to the mouse.		 */		private function computePositions(e:Event):void {			if(stage == null || !_opened) return;			var bounds:Point = parent.localToGlobal(new Point(0,0));						if(_widthMax != 0) {				_label.width	= _widthMax;				_label.wordWrap	= true;			}else{				_label.wordWrap	= false;			}						var tBounds:Rectangle = TextBounds.getBounds(_label);			_label.x			= -tBounds.x + 5;			_label.y			= -tBounds.y + 5;			_background.width	= Math.round(tBounds.width) + 10;			_background.height	= Math.round(tBounds.height) + 10;						switch(_align) {				case ToolTipAlign.BOTTOM_LEFT:					x = parent.mouseX - _background.width;					y = parent.mouseY;					break;									case ToolTipAlign.BOTTOM_RIGHT:					x = parent.mouseX + 12;					y = parent.mouseY;					break;									case ToolTipAlign.BOTTOM_CENTER:					x = parent.mouseX - _background.width * .5;					y = parent.mouseY;					break;									case ToolTipAlign.TOP_LEFT:					x = parent.mouseX - _background.width;					y = parent.mouseY - _background.height - 10;					break;									case ToolTipAlign.TOP_CENTER:					x = parent.mouseX - _background.width * .5;					y = parent.mouseY - _background.height - 10;					break;									case ToolTipAlign.TOP_RIGHT:				default:					x = parent.mouseX;					y = parent.mouseY - _background.height - 10;					break;			}			x = Math.round(x);			y = Math.round(y);			if(x < -bounds.x + 5)	x = -bounds.x + 5;			if(x > -bounds.x + stage.stageWidth - _background.width - 5)	x = -bounds.x + stage.stageWidth - _background.width - 5;			if(y < -bounds.y + 5)	y = -bounds.y + 5;			if(y > -bounds.y + stage.stageHeight - _background.height - 5)	y = -bounds.y + stage.stageHeight - _background.height - 5;		}				/**		 * Called when the skin is modified.		 */		private function changeSkinHandler(e:Event):void {			_background.gotoAndStop(SkinMetrics.getInstance().frame);		}	}}