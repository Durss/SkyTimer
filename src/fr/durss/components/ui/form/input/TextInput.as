package fr.durss.components.ui.form.input {	import fr.durss.skywar.skytimer.data.SkinMetrics;	import com.nurun.components.text.CssTextField;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.FocusEvent;	import flash.text.TextFieldAutoSize;	import flash.text.TextFieldType;	/**	 * Displays a text input textfield.<p>	 * <p>	 * A text input is composed of a background and an editable textfield.	 * 	 * @author Fran√ßois	 */	public class TextInput extends Sprite {		private var _background:MovieClip;		private var _label:CssTextField;		private var _width:int;						/* *********** *		 * CONSTRUCTOR *		 * *********** */		/**		 * Creates an instance of <code>TextInput</code> class.		 */		public function TextInput(css:String = "inputStepper") {			initialize(css);		}						/* ***************** *		 * GETTERS / SETTERS *		 * ***************** */		/**		 * Sets the width of the input without simply scaling it.		 */		override public function set width(value:Number):void {			_width = value;			computePositions();		}				/**		 * Defines if the textfield can be edited.		 */		public function set editable(value:Boolean):void {			_label.type = value? TextFieldType.INPUT : TextFieldType.DYNAMIC;			_label.selectable = value;		}		/**		 * Sets the component's tabIndex value.		 */		override public function set tabIndex(value:int):void { _label.tabIndex = value; }				/**		 * Gets the textfield reference.		 */		public function get textfield():CssTextField { return _label; }								/* ****** *		 * PUBLIC *		 * ****** */				/**		 * Sets the input text		 */		public function setText(str:String, css:String = ""):void {			_label.setText(str, css);			computePositions();		}				/**		 * Gets if the component has the focus		 */		public function hasFocus():Boolean {			return stage.focus != null && (stage.focus == this || contains(stage.focus));		}								/* ******* *		 * PRIVATE *		 * ******* */		/**		 * Initializes the component.		 */		private function initialize(css:String):void {			_background		= addChild(SkinMetrics.getInstance().skinBackInput) as MovieClip;			_label			= addChild(new CssTextField(css)) as CssTextField;			_width			= 50;			_label.autoSize	= TextFieldAutoSize.NONE;			_label.type		= TextFieldType.INPUT;			_label.multiline= false;			_label.selectable= true;						addEventListener(FocusEvent.FOCUS_IN, focusInHandler);			SkinMetrics.getInstance().addEventListener(Event.CHANGE, changeSkinHandler);			computePositions();		}		/**		 * Called when component receives focus		 */		private function focusInHandler(e:FocusEvent):void { stage.focus = _label; }				/**		 * Called when the skin is modified		 */		private function changeSkinHandler(e:Event):void {			removeChild(_background);			_background		= addChildAt(SkinMetrics.getInstance().skinBackInput, 0) as MovieClip;			computePositions();		}		/**		 * Resize / replace the elements		 */		private function computePositions():void {			_background["middleMc"].width	= Math.round(_width - (_background["leftMc"].width + _background["rightMc"].width));			_background["rightMc"].x		= Math.round(_background["middleMc"].x + _background["middleMc"].width);			_label.width					= Math.round(_background["middleMc"].width) + 8;			_label.height					= Math.round(Math.max(14, _label.textHeight + 2));			_label.x						= Math.round((_width - _label.width) * .5);			_label.y						= Math.round((_background["middleMc"].height - _label.height) * .5) - 2;		}	}}